<?php


namespace Packages\PaymentMethods\tests\Unit;

use App\Models\Article;
use App\Models\Setting;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\PaymentsMethods\App\Models\PaymentMethod;
use Packages\PaymentsMethods\App\Models\PaymentProviders;
use Packages\PaymentsMethods\Providers\EasyPay\EasyPay;
use Packages\PaymentsMethods\Providers\EuPago\EuPago;
use Tests\TestCase;


class PaymentProvidersTest extends TestCase
{

    use DatabaseMigrations;

    public $payemnt_methods;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Setting::create(['name' => 'payment_methods', 'data' => [
            ['provider' => EuPago::class, 'key' => 'eu_pago_key', 'private_key' => 'eu_pago_private_key'],
            ['provider' => EasyPay::class, 'key' => 'easy_pay_key', 'private_key' => 'easy_pay_private_key']
        ]]);
    }

    /** @test */
    public function its_possible_to_get_the_provider_details()
    {
        $eu_pago_credencials = (new PaymentProviders())->getDataProvider(EuPago::class);

        $this->assertEquals(['key'=>'eu_pago_key', 'private_key' => 'eu_pago_private_key'], $eu_pago_credencials);

        $easy_pay_credencials = (new PaymentProviders())->getDataProvider(EasyPay::class);
        $this->assertEquals(['key'=>'easy_pay_key', 'private_key' => 'easy_pay_private_key'], $easy_pay_credencials);

    }





}
