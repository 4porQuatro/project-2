<?php


namespace Packages\PaymentMethods\tests\Unit;

use App\Models\Article;
use App\Models\Component;
use App\Models\ModelSetting;
use App\Models\Section;
use App\Models\Setting;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\PaymentsMethods\App\Models\PaymentMethod;
use Packages\PaymentsMethods\Providers\EasyPay\EasyPay;
use Packages\PaymentsMethods\Providers\EuPago\EuPago;
use Tests\TestCase;


class PaymentMethodsTest extends TestCase
{

    use DatabaseMigrations;

    public $payemnt_methods;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Setting::create(['name' => 'payment_methods', 'data' => [
            ['provider' => EuPago::class, 'key' => 'olá mundo', 'private_key' => 'private_key'],
            ['provider' => EasyPay::class, 'key' => 'olá mundo', 'private_key' => 'private_key']
        ]]);
        $this->payment_method = PaymentMethod::factory()->create();
    }

    /** @test */
    public function has_a_name()
    {
        $this->assertNotNull($this->payment_method->name);
    }

    /** @test */
    public function has_a_provider()
    {
        $this->assertNotNull($this->payment_method->provider);
    }

    /** @test */
    public function has_a_provider_method()
    {
        $this->assertNotNull($this->payment_method->provider_method);
    }

    /** @test */
    public function can_have_a_article_to_describe_the_method_of_payment()
    {
        $article = Article::factory()->create(['articlable_id' => $this->payment_method->id, 'articlable_type' => PaymentMethod::class]);

        $this->assertNotEmpty($this->payment_method->article);
        $this->assertInstanceOf(Article::class, $this->payment_method->article);
    }

    /** @test */
    public function can_have_sections()
    {
        $sections = Section::factory(2)->create();
        $this->payment_method->sections()->sync($sections->pluck('id')->toArray());

        $this->assertCount(2, $this->payment_method->sections);
        $this->assertInstanceOf(Section::class, $this->payment_method->sections->first());

    }

    /** @test */
    public function when_the_package_its_activated_the_component_its_automacly_created_and_the_model_setting_with_section()
    {
        $component = Component::where(['componentable_type'=>PaymentMethod::class, 'path'=>'payment_methods::front.examples.details_payment'])->first();
        $this->assertNotEmpty($component);
        $model_setting = ModelSetting::where('model',PaymentMethod::class)->first();
        $this->assertNotEmpty($model_setting);
        $this->assertEquals($component->id, $model_setting->sections()->first()->component_id);
    }




}
