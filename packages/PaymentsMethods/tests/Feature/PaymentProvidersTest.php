<?php


namespace Packages\PaymentMethods\tests\Feature;


use App\Models\Setting;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Livewire\Livewire;
use Packages\PaymentsMethods\App\Http\Controllers\Livewire\cms\providers\Form;
use Packages\PaymentsMethods\App\Http\Controllers\Livewire\cms\providers\Table;
use Packages\PaymentsMethods\App\Models\PaymentMethod;
use Packages\PaymentsMethods\Providers\Easypay\EasyPay;
use Packages\PaymentsMethods\Providers\Eupago\EuPago;
use Tests\Feature\cms\CmsTestCase;

class PaymentProvidersTest extends CmsTestCase {

    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function a_authorized_user_can_see_the_link_to_see_the_payment_methods_module()
    {
        $this->withoutExceptionHandling();
        $this->actingAs($this->user_with_permissions);

        $response = $this->get(route('cms.home'));

        $response->assertStatus(200);
        $response->assertSee(route('cms.payment_methods.providers.index'));
    }

    /** @test */
    public function a_unautorized_user_cant_see_the_ling_too_see_the_payment_methods_module()
    {
        $this->actingAs($this->user_without_permissions);

        $response = $this->get(route('cms.home'));

        $response->assertStatus(200);
        $response->assertDontSee(route('cms.payment_methods.providers.index'));
    }

    /** @test */
    public function a_authorized_user_can_see_the_list_of_avaliable_payment_providers()
    {
        $this->withoutExceptionHandling();
        $this->actingAs($this->user_with_permissions);

        $response = $this->get(route('cms.payment_methods.providers.index'));

        $response->assertStatus(200);
        $response->assertSee(route('cms.payment_methods.providers.create'));
    }

    /** @test */
    public function on_the_creation_form_the_user_can_see_list_of_avaliable_providers()
    {
        $this->actingAs($this->user_with_permissions);

        $response = $this->get(route('cms.payment_methods.providers.create'));

        $response->assertStatus(200);

        Livewire::test(Form::class)->assertSee(EasyPay::class);
    }

    /** @test */
    public function a_authorized_user_can_set_a_new_api_key()
    {
        $this->withoutExceptionHandling();
        $this->actingAs($this->user_with_permissions);

        $data = ['provider'=>EuPago::class, 'key'=>'olá mundo', 'private_key'=>'private_key'];

        $response = $this->post(route('cms.payment_methods.providers.store'), $data);

        $response->assertStatus(302);
        $response->assertRedirect(route('cms.payment_methods.providers.index'));
        $this->assertDatabaseHas('settings', ['name'=>'payment_methods', 'data'=>json_encode([$data])]);
    }

    /** @test */
    public function a_authorized_user_cant_create_duplicate_api_keys()
    {
        $this->actingAs($this->user_with_permissions);

        $data = ['provider' => EuPago::class, 'public_key' => 'olá mundo', 'private_key' => 'private_key'];

        $response = $this->post(route('cms.payment_methods.providers.store'), $data);
        $response = $this->post(route('cms.payment_methods.providers.store'), $data);

        $response->assertStatus(302);
        $response->assertSessionHasErrors(['provider']);
    }

    /** @test */
    public function a_authorized_user_can_see_the_list_of_existing_providers()
    {
        $data = [['provider' => EuPago::class, 'key' => 'olá mundo', 'private_key' => 'private_key']];
        Setting::create(['name'=>'payment_methods', 'data'=>json_encode($data)]);

        Livewire::test(Table::class)->assertSee($data[0]['key']);

    }

    /** @test */
    public function a_authorized_user_can_delete_a_existing_api_key()
    {
        $data = [['provider' => EuPago::class, 'public_key' => 'olá mundo', 'private_key' => 'private_key']];
        Setting::create(['name' => 'payment_methods', 'data' => json_encode($data)]);

        Livewire::test(Table::class)->call('delete', 0);

        $this->assertDatabaseHas('settings', ['name'=>'payment_methods', 'data'=>json_encode([])]);
    }

    /** @test */
    public function when_a_payment_provider_its_deleted_all_related_methods_are_deleted()
    {

        $data = [['provider' => EuPago::class, 'public_key' => 'olá mundo', 'private_key' => 'private_key']];
        Setting::create(['name' => 'payment_methods', 'data' => $data]);
        $data = ['provider'=>EuPago::class, 'name'=>'Eliminar'];
        PaymentMethod::factory()->create($data);

        Livewire::test(Table::class)->call('delete', 0);

        $this->assertDatabaseMissing('payment_methods', $data);
    }



    protected function getPermissions()
    {
        return ['payment_methods_index', 'payment_methods_store', 'payment_methods_update', 'payment_methods_destroy'];
    }
}
