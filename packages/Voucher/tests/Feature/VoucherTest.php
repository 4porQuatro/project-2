<?php

namespace Packages\Voucher\tests\Feature;

use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Country\App\Classes\Front\SessionVariable;
use Packages\Country\App\Models\Currency;
use Packages\Store\app\Classes\Front\Shoppingcart\Cart;
use Packages\Store\app\Models\Product;
use Packages\Voucher\app\Models\Voucher;
use Tests\TestCase;

class VoucherTest extends TestCase {

    use DatabaseMigrations;

    public $voucher;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->voucher =  Voucher::factory()->create();
    }

    /** @test */
    public function a_visitor_can_submit_a_voucher()
    {
        $response = $this->post(route('voucher.post'), ['code'=>$this->voucher->code]);

        $response->assertStatus(200);
    }

    /** @test */
    public function when_a_vistor_submits_a_voucher_it_must_have_a_code()
    {
        $response = $this->post(route('voucher.post', ['code'=>'']));

        $response->assertStatus(302);
        $response->assertSessionHasErrors(['code']);
    }

    /** @test */
    public function the_voucher_code_must_be_a_exiting_voucher()
    {
        $response = $this->post(route('voucher.post'), ['code'=>'filipe_reco']);
        $response->assertStatus(302);
        $response->assertSessionHasErrors(['code'=> __('voucher::app.code_invalid')]);

    }

    /** @test */
    public function the_voucher_must_have_a_valid_expiration_date()
    {
        $this->voucher->expires_at = Carbon::now()->subDay();
        $this->voucher->save();

        $response = $this->post(route('voucher.post'), ['code'=>$this->voucher->code]);

        $response->assertStatus(302);
        $response->assertSessionHasErrors(['code'=> __('voucher::app.voucher_expired')]);
    }

    /** @test */
    public function when_the_voucher_is_valid_its_stored_on_the_session()
    {
        $response = $this->post(route('voucher.post'), ['code'=>$this->voucher->code]);

        $response->assertStatus(200);
        $response->assertSessionHas('voucher_code', $this->voucher->code);
    }

    /** @test */
    public function a_voucher_corretly_aplies_a_discount()
    {
        $product = Product::factory()->create([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ]);
        $product_2 = Product::factory()->create([
            'stock'=>5,
            'price'=>15,
            'promoted_price'=>null
        ]);
        $cart = new Cart(session());
        $cart->add($product, 1);
        $cart->add($product_2, 2);
        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>0]);
        session()->put('voucher_code', $voucher->code);
        $voucher->products()->attach($product->id);

        $response = $this->get(route('voucher.get'));

        $response->assertStatus(200);
        $this->assertEquals(1, $response->baseResponse->original['total_discount']);
    }

    /** @test */
    public function a_voucher_corretly_aplies_a_discount_if_the_discount_value_its_bigger_then_the_discount_percentage()
    {
        $product = Product::factory()->create([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ]);
        $product_2 = Product::factory()->create([
            'stock'=>5,
            'price'=>15,
            'promoted_price'=>null
        ]);
        $cart = new Cart(session());
        $cart->add($product, 1);
        $cart->add($product_2, 2);
        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>5]);
        session()->put('voucher_code', $voucher->code);
        $voucher->products()->attach($product->id);

        $response = $this->get(route('voucher.get'));

        $response->assertStatus(200);
        $this->assertEquals(1, $response->baseResponse->original['total_discount']);
    }

    /** @test */
    public function if_the_percentage_discout_its_0_the_discout_value_its_aplied()
    {
        $product = Product::factory()->create([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ]);

        $cart = new Cart(session());
        $cart->add($product, 1);

        $voucher = Voucher::factory()->create(['percentage_discount'=>0, 'discount_value'=>5]);
        session()->put('voucher_code', $voucher->code);
        $voucher->products()->attach($product->id);

        $response = $this->get(route('voucher.get'));

        $response->assertStatus(200);
        $this->assertEquals(5, $response->baseResponse->original['total_discount']);
    }

    /** @test */
    public function a_voucher_corretly_aplies_a_discount_if_the_discount_value_its_smaller_then_the_discount_percentage()
    {
        $product = Product::factory()->create([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ]);
        $product_2 = Product::factory()->create([
            'stock'=>5,
            'price'=>15,
            'promoted_price'=>null
        ]);
        $cart = new Cart(session());
        $cart->add($product, 1);
        $cart->add($product_2, 2);
        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>0.5]);
        session()->put('voucher_code', $voucher->code);
        $voucher->products()->attach($product->id);

        $response = $this->get(route('voucher.get'));

        $response->assertStatus(200);
        $this->assertEquals(0.5, $response->baseResponse->original['total_discount']);
    }

    /** @test */
    public function the_rate_its_considered_in_the_discount_value_calculation()
    {
        $currency = Currency::first();
        $currency->rate = 26;
        $currency->save();

        SessionVariable::setPriceRate($currency);
        $product = Product::factory()->create([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ]);
        $product_2 = Product::factory()->create([
            'stock'=>5,
            'price'=>15,
            'promoted_price'=>null
        ]);
        $cart = new Cart(session());
        $cart->add($product, 1);
        $cart->add($product_2, 2);

        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>0.5]);
        session()->put('voucher_code', $voucher->code);
        $voucher->products()->attach($product->id);

        $response = $this->get(route('voucher.get'));

        $response->assertStatus(200);
        $this->assertEquals(13, $response->baseResponse->original['total_discount']);

    }

    /** @test */
    public function the_rate_its_considered_in_the_discount_percentage_calculation()
    {
        $currency = Currency::first();
        $currency->rate = 26;
        $currency->save();

        SessionVariable::setPriceRate($currency);
        $product = Product::factory()->create([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ]);
        $product_2 = Product::factory()->create([
            'stock'=>5,
            'price'=>15,
            'promoted_price'=>null
        ]);
        $cart = new Cart(session());
        $cart->add($product, 1);
        $cart->add($product_2, 2);

        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>2]);
        session()->put('voucher_code', $voucher->code);
        $voucher->products()->attach($product->id);

        $response = $this->get(route('voucher.get'));

        $response->assertStatus(200);
        $this->assertEquals(26, $response->baseResponse->original['total_discount']);

    }







}
