<?php

namespace Packages\Voucher\tests\Unit;

use App\Models\Category;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Orders\tests\Mocks\Article;
use Packages\Store\app\Models\Product;
use Packages\Voucher\app\Models\Voucher;
use Packages\Voucher\app\Models\Voucherable;
use Tests\TestCase;

class VoucherTest extends TestCase {
    use DatabaseMigrations;

    private $voucher;


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->voucher = Voucher::factory()->create();
    }

    /** @test */
    public function has_a_name()
    {
        $this->assertNotEmpty($this->voucher->name);
        $this->assertArrayHasKey('name', $this->voucher->toArray());
    }

    /** @test */
    public function has_a_code_automacly_generated()
    {
        $this->assertNotEmpty($this->voucher->code);
        $this->assertArrayHasKey('name', $this->voucher->toArray());
    }

    /** @test */
    public function on_creation_the_code_can_be_setted_by_the_user()
    {
        $voucher = Voucher::factory()->create(['code'=>'filipe']);
        $this->assertEquals('filipe', $voucher->code);
    }

    /** @test */
    public function on_creation_the_code_can_be_automacly_generated()
    {
        $voucher = Voucher::factory()->create(['code'=>'']);
        $this->assertNotEmpty($voucher->code);
    }

    /** @test */
    public function can_have_a_dicount_in_percentage()
    {
        $this->assertNotEmpty($this->voucher->percentage_discount);
        $this->assertArrayHasKey('percentage_discount', $this->voucher->toArray());
    }

    /** @test */
    public function can_have_a_dicount_in_value()
    {
        $this->assertNotEmpty($this->voucher->discount_value);
        $this->assertArrayHasKey('discount_value', $this->voucher->toArray());
    }

    /** @test */
    public function the_model_its_using_soft_deletes()
    {
        $code = $this->voucher->code;
        $this->voucher->delete();

        $this->assertCount(0, Voucher::all());
        $this->assertDatabaseHas('vouchers', ['code'=>$code]);
    }


    /** @test */
    public function a_voucher_can_be_associated_with_categories()
    {
        $voucher = Voucher::factory()->create();

        $category = Category::factory()->create();

        $voucher->voucherables(Category::class)->attach([$category->id]);

        $this->assertCount(1, $voucher->voucherables(Category::class)->get());
        $this->assertInstanceOf(Category::class, $voucher->voucherables(Category::class)->first());
    }

    /** @test */
    public function a_voucher_can_be_associated_with_products()
    {
        $voucher = Voucher::factory()->create();
        $product = Product::factory()->create();

        $voucher->products()->attach([$product->id]);

        $this->assertCount(1, $voucher->products);
        $this->assertInstanceOf(Product::class, $voucher->products->first());
    }

}
