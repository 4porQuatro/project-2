<?php


namespace Packages\Reserved\tests\Unit;

use App\Models\Form;
use App\Models\Page;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Reserved\App\Models\ReservedArea;
use Tests\TestCase;


class ReservedAreaTest extends TestCase
{

    use DatabaseMigrations;

    public $reserved_area;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->reserved_area = ReservedArea::factory()->create();
    }

    /** @test */
    public function has_a_name()
    {
        $this->assertNotNull($this->reserved_area->name);
    }

    /** @test */
    public function has_a_prefix()
    {
        $this->assertNotNull($this->reserved_area->prefix);
    }

    /** @test */
    public function can_have_forms()
    {
        $form = Form::factory()->create(['formable_id'=>$this->reserved_area->id, 'formable_type'=>ReservedArea::class]);

        $this->assertInstanceOf(Form::class, $this->reserved_area->forms->first());
    }

    /** @test */
    public function can_have_users()
    {
        $this->assertEmpty($this->reserved_area->users()->get());
        $users = User::factory(5)->create(['reserved_area_id'=>$this->reserved_area->id]);

        $this->assertCount(5, $this->reserved_area->users()->get());
        $this->assertInstanceOf(User::class, $this->reserved_area->users->first());
    }

    /** @test */
    public function as_a_login_page()
    {
        $page_login = Page::factory()->create();
        $reserved = ReservedArea::factory()->create(['login_page_id'=>$page_login->id]);

        $this->assertNotNull($reserved->login_page_id);
        $this->assertInstanceOf(Page::class, $reserved->loginPage()->first());
    }

    /** @test */
    public function can_have_pages()
    {
        $reserved = ReservedArea::factory()->create();
        $page = Page::factory(3)->create(['pageable_id'=>$reserved->id, 'pageable_type'=>ReservedArea::class]);

        $this->assertNotNull($reserved->pages);
        $this->assertInstanceOf(Page::class, $reserved->pages->first());
        $this->assertCount(3, $reserved->pages);
    }


}
