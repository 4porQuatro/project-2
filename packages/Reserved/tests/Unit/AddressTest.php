<?php

namespace Packages\Reserved\tests\Unit;

use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Country\App\Models\Country;
use Packages\Country\App\Models\Region;
use Packages\Reserved\App\Constants\AddressesTypes;
use Packages\Reserved\App\Models\Address;
use Packages\Reserved\App\Models\Customer;
use Tests\TestCase;

class AddressTest extends TestCase
{
    use DatabaseMigrations;

    public $user;
    public $address;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = Customer::factory()->create();
        $this->address = Address::factory()->create([
            'user_id'=>$this->user->id,
            'type'=>AddressesTypes::BILLING,
            'default'=>true
        ]);
    }

    /** @test */
    public function has_a_type()
    {
        $this->assertNotNull($this->address->type);
        $this->assertIsString($this->address->type);
    }

    /** @test */
    public function has_a_name()
    {
        $this->assertNotNull($this->address->name);
        $this->assertIsString($this->address->name);
    }

    /** @test */
    public function has_a_address()
    {
        $this->assertNotNull($this->address->address);
        $this->assertIsString($this->address->address);
    }

    /** @test */
    public function can_have_a_nif()
    {
        $this->assertNotNull($this->address->nif);
        $this->assertIsString($this->address->nif);
    }

    /** @test */
    public function can_have_a_postal_code()
    {
        $this->assertNotNull($this->address->post_code);
        $this->assertIsString($this->address->post_code);
    }

    /** @test */
    public function can_have_a_postal_code_prefix()
    {
        $this->assertNotNull($this->address->post_code_prefix);
        $this->assertIsString($this->address->post_code_prefix);
    }


    /** @test */
    public function belongs_to_a_country()
    {
        $this->assertNotNull($this->address->country);
        $this->assertInstanceOf(Country::class, $this->address->country);
    }

    /** @test */
    public function belongs_to_a_region()
    {
        $this->assertNotNull($this->address->region);
        $this->assertInstanceOf(Region::class, $this->address->region);
    }
    /** @test */
    public function can_have_a_phone()
    {
        $this->assertNotNull($this->address->phone);
        $this->assertIsString($this->address->phone);
    }

    /** @test */
    public function can_have_a_city()
    {
        $this->assertNotNull($this->address->city);
        $this->assertIsString($this->address->city);
    }

    /** @test */
    public function can_have_a_additional_data()
    {
        $this->assertNotNull($this->address->additional_data);
        $this->assertIsArray($this->address->additional_data);
    }

    /** @test */
    public function have_a_default_status()
    {
        $this->assertNotNull($this->address->default);
        $this->assertIsBool($this->address->default);
    }

    /** @test */
    public function can_have_a_user_associated()
    {
        $this->assertNotNull($this->address->user);
        $this->assertInstanceOf(User::class, $this->address->user);
    }

    /** @test */
    public function can_have_not_a_associated_user()
    {
        $address_without_user = Address::factory()->create([
            'type'=>AddressesTypes::BILLING,
            'default'=>true
        ]);

        $this->assertNull($address_without_user->user);
    }
}
