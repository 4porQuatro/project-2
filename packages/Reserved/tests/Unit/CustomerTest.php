<?php

namespace Packages\Reserved\tests\Unit;

use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Reserved\App\Constants\AddressesTypes;
use Packages\Reserved\App\Models\Address;
use Packages\Reserved\App\Models\Customer;
use Tests\TestCase;

class CustomerTest extends TestCase
{
    use DatabaseMigrations;

    public $customer;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->customer = Customer::factory()->create();
    }

    /** @test */
    public function a_customer_is_a_user()
    {
        $this->assertInstanceOf(User::class, $this->customer);
        $this->assertInstanceOf(Customer::class, $this->customer);
    }

    /** @test */
    public function can_have_not_addresses_associated()
    {
        $this->assertInstanceOf(Collection::class, $this->customer->addresses);
        $this->assertEmpty($this->customer->addresses);
    }

    /** @test */
    public function can_have_multiple_addresses_associated()
    {
        $this->createAddress($this->customer->id);
        $this->createAddress($this->customer->id);

        $this->assertInstanceOf(Collection::class, $this->customer->addresses);
        $this->assertNotEmpty($this->customer->addresses);
        $this->assertCount(2, $this->customer->addresses);
    }

    /** @test */
    public function can_have_multiple_billing_addresses()
    {
        $this->createAddress($this->customer->id, AddressesTypes::BILLING, true);
        $this->createAddress($this->customer->id, AddressesTypes::BILLING, false);

        $this->createAddress($this->customer->id, AddressesTypes::SHIPPING, true);

        $this->assertInstanceOf(Collection::class, $this->customer->billingAddresses);
        $this->assertNotEmpty($this->customer->billingAddresses);
        $this->assertCount(2, $this->customer->billingAddresses);

        foreach ($this->customer->billingAddresses as $address)
        {
            $this->assertEquals(AddressesTypes::BILLING, $address->type);
        }
    }

    /** @test */
    public function can_have_multiple_shipping_addresses()
    {
        $this->createAddress($this->customer->id, AddressesTypes::SHIPPING, true);
        $this->createAddress($this->customer->id, AddressesTypes::SHIPPING, false);

        $this->createAddress($this->customer->id, AddressesTypes::BILLING, true);

        $this->assertInstanceOf(Collection::class, $this->customer->shippingAddresses);
        $this->assertNotEmpty($this->customer->shippingAddresses);
        $this->assertCount(2, $this->customer->shippingAddresses);

        foreach ($this->customer->shippingAddresses as $address)
        {
            $this->assertEquals(AddressesTypes::SHIPPING, $address->type);
        }
    }

    /** @test */
    public function can_have_a_default_billing_address()
    {
        $first_address = $this->createAddress($this->customer->id, AddressesTypes::BILLING, true);
        $this->createAddress($this->customer->id, AddressesTypes::BILLING, false);

        $billing_address = $this->customer->billingAddress();

        $this->assertInstanceOf(Address::class, $billing_address);
        $this->assertTrue($billing_address->default);
        $this->assertEquals($billing_address->type, AddressesTypes::BILLING);
        $this->assertEquals($billing_address->id, $first_address->id);
    }

    /** @test */
    public function can_have_a_default_shipping_address()
    {
        $first_address = $this->createAddress($this->customer->id, AddressesTypes::SHIPPING, true);
        $this->createAddress($this->customer->id, AddressesTypes::SHIPPING, false);

        $shipping_address = $this->customer->shippingAddress();

        $this->assertInstanceOf(Address::class, $shipping_address);
        $this->assertTrue($shipping_address->default);
        $this->assertEquals($shipping_address->type, AddressesTypes::SHIPPING);
        $this->assertEquals($shipping_address->id, $first_address->id);
    }

    public function createAddress($user_id, $type = AddressesTypes::BILLING, $default = true)
    {
        return Address::factory()->create([
            'user_id'=>$user_id,
            'type'=>$type,
            'default'=>$default
        ]);
    }


}
