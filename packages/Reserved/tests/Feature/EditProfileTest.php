<?php


namespace Packages\Reserved\tests\Feature;


use App\Models\Form;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Http\UploadedFile;
use Packages\Reserved\App\Constants\FormTypes;
use Packages\Reserved\App\Models\Customer;
use Packages\Reserved\App\Models\ReservedArea;
use Tests\TestCase;

class EditProfileTest extends TestCase {

    use DatabaseMigrations;
    public $reserved;
    public $customer;
    public $start_input_types;
    public $start_profile_fields;
    public $start_profile_data;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->reserved = ReservedArea::factory()->create(['prefix'=>'prefix_test']);

        $this->start_input_types = [
            'name'=>'text',
            'email'=>'email',
            'password'=>'password',
            'password_confirmation'=>'password',
            'phone_number'=>'text',
            'document'=>'doc',
        ];

        $this->start_profile_fields = [
            'name'=>'Nome',
            'email'=>'Email',
            'password'=>'Password',
            'password_confirmation'=>'Confirmar passwod',
            'phone_number'=>'Numero tlm',
            'document'=>'Documento',
        ];

        $this->start_profile_data = [
            'phone_number'=>'912345678',
            'document'=>'document_xpto_reco',
        ];

        $this->customer = Customer::factory()->create([
            'profile_fields'=>json_encode($this->start_profile_fields),
            'profile_data'=>json_encode($this->start_profile_data),
            'profile_input_types'=>json_encode($this->start_input_types),
            'reserved_area_id'=>json_encode($this->reserved->id),
        ]);
    }

    /** @test */
    public function a_user_can_update_their_profile()
    {
        $this->withoutExceptionHandling();
        $this->actingAs($this->customer);

        $fields_names = [
            'name', 'phone_number', 'document'
        ];

        $form = $this->generateProfileForm();
        $fields = $this->generateFormFields($form, $fields_names);

        $data = [
            'cms_form_id'=>$form->id,
            'name'=>'novo nome',
            'phone_number'=>'phone number',
            'document'=>null
        ];

        $expected_profile_data = json_encode([
            'phone_number'=>$data['phone_number'],
            'document'=>$this->start_profile_data['document'],
        ]);

        $expected_profile_input_types = json_encode($form->fields()->ordered()->get()->pluck('type', 'name'));

        $expected_profile_fields = json_encode($form->fields()->get()->pluck('label', 'name')->toArray());

        $response = $this->patch($form->end_point, $data);

        $this->assertEquals(route($this->reserved->prefix.'.profile'), $form->end_point);
        $response->assertStatus(302);

        $this->assertDatabaseHas('users', [
            'name'=>$data['name'],
            'email'=>$this->customer->email,
            'profile_data'=>$expected_profile_data,
            'profile_input_types'=>$expected_profile_input_types,
            'profile_fields'=>$expected_profile_fields
        ]);
    }

    /** @test */
    public function a_user_can_update_their_profile_with_new_fields()
    {
        $this->withoutExceptionHandling();
        $this->actingAs($this->customer);

        $fields_names = [
            'name', 'phone_number', 'document', 'document_2'
        ];

        $form = $this->generateProfileForm();
        $fields = $this->generateFormFields($form, $fields_names);

        $data = [
            'cms_form_id'=>$form->id,
            'name'=>'novo nome',
            'phone_number'=>'phone number',
            'document'=>null,
            'document_2'=>UploadedFile::fake()->create('file_name')
        ];

        $expected_profile_input_types = json_encode($form->fields()->ordered()->get()->pluck('type', 'name'));

        $expected_profile_fields = json_encode($form->fields()->get()->pluck('label', 'name')->toArray());

        $response = $this->patch($form->end_point, $data);

        $this->assertEquals(route($this->reserved->prefix.'.profile'), $form->end_point);
        $response->assertStatus(302);

        $this->assertDatabaseHas('users', [
            'name'=>$data['name'],
            'email'=>$this->customer->email,
            'profile_input_types'=>$expected_profile_input_types,
            'profile_fields'=>$expected_profile_fields
        ]);

        $this->assertArrayHasKey('document_2', $this->customer->fresh()->profile_data);
    }

    /** @test */
    public function a_user_can_update_their_profile_and_make_a_field_null()
    {
        $this->withoutExceptionHandling();
        $this->actingAs($this->customer);

        $fields_names = [
            'name', 'phone_number', 'document'
        ];

        $form = $this->generateProfileForm();
        $fields = $this->generateFormFields($form, $fields_names);

        $data = [
            'cms_form_id'=>$form->id,
            'name'=>'novo nome',
            'phone_number'=>null,
            'document'=>null
        ];

        $expected_profile_data = json_encode([
            'phone_number'=>$data['phone_number'],
            'document'=>$this->start_profile_data['document'],
        ]);

        $expected_profile_input_types = json_encode($form->fields()->ordered()->get()->pluck('type', 'name'));

        $expected_profile_fields = json_encode($form->fields()->get()->pluck('label', 'name')->toArray());

        $response = $this->patch($form->end_point, $data);

        $this->assertEquals(route($this->reserved->prefix.'.profile'), $form->end_point);
        $response->assertStatus(302);

        $this->assertDatabaseHas('users', [
            'name'=>$data['name'],
            'email'=>$this->customer->email,
            'profile_data'=>$expected_profile_data,
            'profile_input_types'=>$expected_profile_input_types,
            'profile_fields'=>$expected_profile_fields
        ]);
    }

    private function generateProfileForm()
    {
        $form = Form::factory()->create(['type' => FormTypes::PROFILE, 'formable_type' => ReservedArea::class, 'formable_id' => $this->reserved->id]);
        return $form;
    }

    private function generateFormFields($form, $fields_name)
    {
        foreach ($fields_name as $field_name)
        {
            $field_data = $this->avaiableFields()[$field_name];
            $form->fields()->create($field_data);
        }

        return $form->fresh()->fields;
    }

    private function avaiableFields()
    {
        return [
            'name'=>['name'=>'name', 'label'=>'Nome', 'type'=>'text'],
            'phone_number'=>['name'=>'phone_number', 'label'=>'Phone Number', 'type'=>'text'],
            'document'=>['name'=>'document', 'label'=>'Documento', 'type'=>'doc'],
            'document_2'=>['name'=>'document_2', 'label'=>'Documento 2', 'type'=>'doc'],
        ];
    }
}
