<?php


namespace Packages\Reserved\tests\Feature;


use App\Models\Field;
use App\Models\Form;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Orders\App\Constants\CheckoutTypes;
use Packages\Orders\App\Models\Checkout;
use Packages\Reserved\App\Constants\FormTypes;
use Packages\Reserved\App\Models\ReservedArea;
use Packages\Store\app\Classes\Front\Shoppingcart\Cart;
use Packages\Store\app\Models\Product;
use Tests\TestCase;

class RegisterTest extends TestCase {

    use DatabaseMigrations;
    public $reserved;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->reserved = ReservedArea::factory()->create(['prefix'=>'prefix_test']);
    }

    /** @test */
    public function a_user_can_register_to_a_given_reserved_area()
    {
        $this->withoutExceptionHandling();
        $form = $this->generateRegistrationForm();
        $inputs = $this->generateRequiredFields($form);
        $registration_form = $this->generateData($form);

        $response = $this->post($form->end_point, $registration_form);

        $this->assertEquals(route($this->reserved->prefix.'.register'), $form->end_point);
        $response->assertStatus(302);
        $response->assertRedirect($this->reserved->prefix);
        $this->assertDatabaseHas('users', ['name'=>'email@email.pt', 'email'=>'email@email.pt']);
        $user = User::where('email', 'email@email.pt')->first();
        $this->assertAuthenticatedAs($user);
    }

    /** @test */
    public function if_a_user_has_a_cart_its_redirected_to_the_normal_checkout_defined_for_the_reserved_area()
    {
        if(env('APP_STORE') && env('APP_ORDERS'))
        {
            $cart = new Cart(session());
            $product = Product::factory()->create();
            $cart->add($product, 1);
            $form = $this->generateRegistrationForm();
            $inputs = $this->generateRequiredFields($form);
            $registration_form = $this->generateData($form);
            $checkout = Checkout::factory()->create(['type' => CheckoutTypes::NORMAL, 'reserved_area_id'=>$this->reserved->id]);

            $response = $this->post($form->end_point, $registration_form);
            $response->assertStatus(302);
            $response->assertRedirect(route('checkout.show', ['checkout'=>$checkout->id]));
        } else {
            $this->assertTrue(true);
        }

    }

    /** @test */
    public function main_fields_and_adicional_fields_are_saved_on_the_users_table()
    {
        $form = $this->generateRegistrationForm();
        $inputs = $this->generateRequiredFields($form);
        $registration_form = $this->generateData($form);

        $form->fields()->create(['name' => 'new_name','label'=>'teste', 'type' =>'text', 'rules' => ['required']]);
        $registration_form['new_name'] =  'ola';

        $response = $this->post($form->end_point, $registration_form);
        $response->assertStatus(302);
        unset($registration_form['name']);
        unset($registration_form['email']);
        unset($registration_form['password']);
        unset($registration_form['password_confirmation']);
        unset($registration_form['cms_form_id']);
        $profile_fields = $form->fields()->get()->pluck('label', 'name')->toArray();
        $this->assertDatabaseHas('users', ['profile_data'=>json_encode($registration_form), 'profile_fields'=>json_encode($profile_fields)]);

    }

    /**
     * @dataProvider incorrectData
     */
    public function test_registration_erros($type, $content)
    {

        $form = $this->generateRegistrationForm();
        $inputs = $this->generateRequiredFields($form);
        $content['cms_form_id'] = $form->id;
        $response = $this->post($form->end_point, $content);

        $response->assertStatus(302);
        $response->assertSessionHasErrors($type);
    }

    public function incorrectData()
    {
        return array(
            ['name', ['name'=>'','email'=>'ola@ola.pt', 'password'=>'12345', 'password_confirmation'=>'12345']],
            ['email', ['name'=>'as','email'=>'olaola.pt', 'password'=>'12345', 'password_confirmation'=>'12345']],
            ['email', ['name'=>'as','email'=>'info@4por4.pt', 'password'=>'12345', 'password_confirmation'=>'12345']],
            ['email', ['name'=>'as','email'=>'', 'password'=>'12345', 'password_confirmation'=>'12345']],
            ['password', ['name'=>'as','email'=>'', 'password'=>'', 'password_confirmation'=>'12345']],
            ['password', ['name'=>'as','email'=>'', 'password'=>'fad', 'password_confirmation'=>'12345']],
            ['password', ['name'=>'as','email'=>'', 'password'=>'12345', 'password_confirmation'=>'1234']],
        );
    }



    /**
     * @return \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model|mixed
     */
    private function generateRegistrationForm()
    {
        $form = Form::factory()->create(['type' => FormTypes::REGISTER, 'formable_type' => ReservedArea::class, 'formable_id' => $this->reserved->id]);

        return $form;
    }

    /**
     * @param \Illuminate\Database\Eloquent\Model $form
     * @return mixed
     */
    private function generateRequiredFields(\Illuminate\Database\Eloquent\Model $form)
    {
        foreach ($this->reserved->formRequiredFields()[FormTypes::REGISTER] as $inputs)
        {
            $data = ['name' => $inputs['name'],'label'=>$inputs['label'], 'type' => $inputs['type'], 'rules' => $inputs['rules'], 'editable' => $inputs['editable']];
            $form->fields()->create($data);
        }

        return $inputs;
    }

    /**
     * @param array $registration_form
     * @param \Illuminate\Database\Eloquent\Model $form
     * @return array
     */
    private function generateData(\Illuminate\Database\Eloquent\Model $form): array
    {
        foreach ($this->reserved->formRequiredFields()[FormTypes::REGISTER] as $inputs)
        {
            $registration_form[$inputs['name']] = 'email@email.pt';
        }
        $registration_form['cms_form_id'] = $form->id;

        return $registration_form;
    }


}
