<?php


namespace Packages\Orders\tests\Unit;


use App\Models\Form;
use App\Models\Layout;
use App\Models\Section;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Collection;
use Packages\Country\App\Models\Country;
use Packages\Country\App\Models\Zone;
use Packages\Orders\App\Constants\CheckoutTypes;
use Packages\Orders\App\Constants\FormTypes;
use Packages\Orders\App\Models\Checkout;
use Packages\PaymentsMethods\App\Models\PaymentMethod;
use Packages\Reserved\App\Models\ReservedArea;
use Packages\shipping_methods\App\Models\ShippingMethod;
use Tests\TestCase;

class CheckoutTest extends TestCase {

    use DatabaseMigrations;

    public $checkout;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->checkout = Checkout::factory()->create();
    }

    /** @test */
    public function has_a_name()
    {
        $this->assertArrayHasKey('name', $this->checkout->toArray());
    }

    /** @test */
    public function has_many_forms()
    {
        Form::factory(2)->create(['formable_type'=>Checkout::class, 'formable_id'=>$this->checkout->id]);

        $this->assertInstanceOf(Form::class, $this->checkout->forms()->first());
        $this->assertCount(2, $this->checkout->forms);
    }

    /** @test */
    public function as_diferent_types_of_checkout()
    {
        ReservedArea::factory()->create();
        $checkout_model = new Checkout();
        $this->assertEquals(2, count($checkout_model->types()));
        $this->assertArrayHasKey(CheckoutTypes::NORMAL, $checkout_model->types());
        $this->assertArrayHasKey(CheckoutTypes::FAST, $checkout_model->types());
        $this->assertEquals('order::cms.fast_checkout', $checkout_model->types()[CheckoutTypes::FAST]);
        $this->assertEquals('order::cms.normal_checkout', $checkout_model->types()[CheckoutTypes::NORMAL]);

    }

    /** @test */
    public function can_have_multiple_sections()
    {
        $sections = Section::factory(4)->create();
        $this->checkout->sections()->sync($sections->pluck('id')->toArray());

        $this->assertInstanceOf(Collection::class, $this->checkout->sections);
        $this->assertInstanceOf(Section::class, $this->checkout->sections->first());
    }

    /** @test */
    public function the_type_name_attribute_returns_the_type_name()
    {
        $checkout = Checkout::factory()->create(['type'=>CheckoutTypes::FAST]);

        $this->assertEquals(__($checkout->types()[CheckoutTypes::FAST]), $checkout->type_name);
    }

    /** @test */
    public function a_checkout_as_end_point_to_show_the_form()
    {
        $checkout = Checkout::factory()->create(['type'=>CheckoutTypes::FAST]);

        $end_point = route('checkout.show', [$checkout->id]);

        $this->assertEquals($end_point, $checkout->showLink());
    }

    /** @test */
    public function a_checkout_as_end_point_to_submit_the_form()
    {
        $checkout = Checkout::factory()->create(['type'=>CheckoutTypes::FAST]);

        $end_point = route('checkout.store', [$checkout->id]);

        $this->assertEquals($end_point, $checkout->storeLink());
    }

    /** @test */
    public function a_checkout_can_have_a_layout()
    {
        $checkout = Checkout::factory()->create(['type' => CheckoutTypes::FAST]);
        $this->assertNull($checkout->layout);
        $checkout->layout_id = Layout::first()->id;
        $checkout->save();

        $this->assertInstanceOf(Layout::class, $checkout->layout()->first());
    }

    /** @test */
    public function a_checkout_can_belongs_to_a_reserved_area()
    {
        $checkout = Checkout::factory()->create(['type' => CheckoutTypes::NORMAL, 'reserved_area_id'=>ReservedArea::factory()->create()->id]);

        $checkout->fresh();

        $this->assertInstanceOf(ReservedArea::class, $checkout->reservedArea);
        $this->assertArrayHasKey('reserved_area_id', $checkout->toArray());
    }

    /** @test */
    public function a_checkout_has_avaliable_countries()
    {
        $shipping_method = ShippingMethod::factory()->create();
        $shipping_method->zones()->attach($zone = Zone::factory()->create());
        $avaliable_countries = Country::limit(10)->get();
        $zone->countries()->attach($avaliable_countries);

        $this->assertCount($avaliable_countries->count(), $this->checkout->avaliableCountries());
    }

    /** @test */
    public function its_possible_retrieve_the_avaliable_shipping_methods_for_a_given_country()
    {
        $zone1 = Zone::factory()->create();
        $country_france = Country::where('code', 'fr')->first();
        $zone1->countries()->attach($country_france->id);
        $shipping_method = ShippingMethod::factory()->create();
        $shipping_method->zones()->attach($zone1);

        $zone2 = Zone::factory()->create();
        $country_portugal = Country::where('code', 'pt')->first();
        $zone2->countries()->attach($country_portugal->id);
        $shipping_method2 = ShippingMethod::factory()->create();
        $shipping_method2->zones()->attach($zone2);

        $shipping_methods_retrieved = $this->checkout->getShippingMethodsByCountry($country_france->id);
        $this->assertCount(1, $shipping_methods_retrieved);
        $this->assertEquals($shipping_method->name, $shipping_methods_retrieved->first()->name);
    }

    /** @test */
    public function its_possible_add_email_receivers_to_user_when_a_order_its_processed()
    {
        $emails = ['mie10010@gmail.com', 'fmagalhaes@4por4.pt'];
        $checkout = Checkout::factory()->create(['type' => CheckoutTypes::NORMAL, 'reserved_area_id'=>ReservedArea::factory()->create()->id]);
        $checkout->email_receivers = $emails;
        $checkout->save();

        $this->assertArrayHasKey('email_receivers', $checkout->fresh()->toArray());
        $this->assertEquals($emails,$checkout->fresh()->email_receivers);

    }



}
