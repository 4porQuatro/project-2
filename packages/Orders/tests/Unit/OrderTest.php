<?php


namespace Packages\Orders\tests\Unit;


use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Country\App\Models\Currency;
use Packages\Orders\App\Constants\OrderStatus;
use Packages\Orders\App\Models\Checkout;
use Packages\Orders\App\Models\Order;
use Packages\Orders\App\Models\OrderItem;
use Packages\Voucher\app\Models\Voucher;
use Tests\TestCase;

class OrderTest extends TestCase {

    use DatabaseMigrations;

    public $order;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->order = Order::factory()->create();
    }

    /** @test */
    public function belongs_to_a_user()
    {
        $this->assertArrayHasKey('user_id', $this->order->toArray());
        $this->assertInstanceOf(User::class, $this->order->user);
    }

    /** @test */
    public function belongs_to_a_checkout()
    {
        $this->assertArrayHasKey('checkout_id', $this->order->toArray());
        $this->assertInstanceOf(Checkout::class, $this->order->checkout);
    }

    /** @test */
    public function has_a_total()
    {
        $this->assertArrayHasKey('total', $this->order->toArray());
        $this->assertIsFloat($this->order->total);
    }

    /** @test */
    public function has_a_tracking_code_url()
    {
        $this->assertArrayHasKey('tracking_code_url', $this->order->toArray());
    }

    /** @test */
    public function has_a_tracking_code()
    {
        $this->assertArrayHasKey('tracking_code', $this->order->toArray());
    }


    /** @test */
    public function has_a_total_discount()
    {
        $this->assertArrayHasKey('total_discount', $this->order->toArray());
        $this->assertIsFloat($this->order->total_discount);
    }

    /** @test */
    public function has_a_total_shipping()
    {
        $this->assertArrayHasKey('total_shipping', $this->order->toArray());
        $this->assertIsFloat($this->order->total_shipping);
    }

    /** @test */
    public function has_a_total_taxes()
    {
        $this->assertArrayHasKey('total_taxes', $this->order->toArray());
        $this->assertIsFloat($this->order->total_taxes);
    }

    /** @test */
    public function has_billing_data_values()
    {
        $this->assertArrayHasKey('billing_address_keys', $this->order->toArray());
        $this->assertArrayHasKey('billing_address_data', $this->order->toArray());
        $this->assertIsArray($this->order->billing_address_keys);
        $this->assertIsArray($this->order->billing_address_data);
    }

    /** @test */
    public function can_have_multiple_order_items()
    {
        OrderItem::factory(2)->create(['order_id'=>$this->order->id]);
        $this->assertCount(2, $this->order->items);
        $this->assertInstanceOf(OrderItem::class, $this->order->items->first());
    }

    /** @test */
    public function a_order_can_have_a_status_of_pending()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::PENDING]);

        $this->assertEquals($order->getStatus(), 'order::cms.pending');
    }

    /** @test */
    public function a_order_can_have_a_status_of_awaiting_payment()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::AWAITING_PAYMENT]);

        $this->assertEquals($order->getStatus(),'order::cms.awaiting_payment');
    }

    /** @test */
    public function a_order_can_have_a_status_of_awaiting_fulfillment()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::AWAITING_FULFILLMENT]);

        $this->assertEquals($order->getStatus(), 'order::cms.awaiting_fulfillment');
    }

    /** @test */
    public function a_order_can_have_a_status_of_awaiting_shippment()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::AWAITING_SHIPPMENT]);

        $this->assertEquals($order->getStatus(), 'order::cms.awaiting_shippment');
    }

    /** @test */
    public function a_order_can_have_a_status_of_partialy_shipped()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::PARTIALY_SHIPPED]);

        $this->assertEquals($order->getStatus(), 'order::cms.partialy_shipped');
    }

    /** @test */
    public function a_order_can_have_a_status_of_shipped()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::SHIPPED]);

        $this->assertEquals($order->getStatus(), 'order::cms.shipped');
    }

    /** @test */
    public function a_order_can_have_a_status_of_completed()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::COMPLETED]);

        $this->assertEquals($order->getStatus(),'order::cms.completed');
    }

    /** @test */
    public function a_order_can_have_a_status_of_canceled()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::CANCELED]);

        $this->assertEquals($order->getStatus(), 'order::cms.canceled');
    }

    /** @test */
    public function a_order_can_have_a_status_of_refunded()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::REFUNDED]);

        $this->assertEquals($order->getStatus(), 'order::cms.refunded');
    }

    /** @test */
    public function a_order_can_have_a_status_of_disputed()
    {
        $order = Order::factory()->create(['status'=>OrderStatus::DISPUTED]);

        $this->assertEquals($order->getStatus(), 'order::cms.disputed');
    }

    /** @test */
    public function a_order_has_grand_total()
    {
        $order = Order::factory()->create(['status' => OrderStatus::DISPUTED]);

        $this->assertArrayHasKey('grand_total', $this->order->toArray());
    }

    /** @test */
    public function on_orders_the_original_shipping_method_its_storred()
    {
        $order = Order::factory()->create(['status' => OrderStatus::DISPUTED]);
        $this->assertArrayHasKey('original_shipping_method', $this->order->toArray());
    }

    /** @test */
    public function a_order_can_have_status_notes()
    {
        $order = Order::factory()->create(['status' => OrderStatus::DISPUTED, 'status_note'=>'']);
        $this->assertArrayHasKey('status_note', $this->order->fresh()->toArray());

    }

    /** @test */
    public function on_orders_the_original_payment_method_its_storred()
    {
        $order = Order::factory()->create(['status' => OrderStatus::DISPUTED]);
        $this->assertArrayHasKey('original_payment_method', $this->order->toArray());
    }

    /** @test */
    public function a_order_as_a_currency_used_to_pay_the_order()
    {
        $order = Order::factory()->create(['currency_id'=> Currency::first()->id]);
        $this->assertArrayHasKey('currency_id', $order->toArray());
    }

    /** @test */
    public function a_order_has_a_rate_userd_to_convert_the_prices()
    {
        $order = Order::factory()->create(['currency_rate'=>1]);

        $this->assertArrayHasKey('currency_rate', $order->toArray());
    }

    /** @test */
    public function a_order_has_a_voucher_object_used_to_oject()
    {
        $voucher = Voucher::factory()->create();
        $order = Order::factory()->create(['voucher_object'=>$voucher->toArray()]);
        $this->assertArrayHasKey('voucher_object', $order->toArray());
    }

    /** @test */
    public function a_order_has_a_total_voucher_discount()
    {
        $order = Order::factory()->create(['voucher_discount'=>3.43]);
        $this->assertArrayHasKey('voucher_discount', $order->toArray());
    }

    /** @test */
    public function a_order_has_a_invoice_data_field()
    {
        $invoice_data = ['ola'];
        $order = Order::factory()->create(['invoice_data'=>$invoice_data]);

        $this->assertArrayHasKey('invoice_data', $order->toArray());
        $this->assertNotEmpty($order->invoice_data);
        $this->assertEquals($invoice_data, $order->invoice_data);

    }



}
