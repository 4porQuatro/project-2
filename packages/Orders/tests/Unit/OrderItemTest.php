<?php


namespace Packages\Orders\tests\Unit;


use App\Models\Article;
use App\Models\Page;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Orders\App\Models\Order;
use Packages\Orders\App\Models\OrderItem;
use Tests\TestCase;

class OrderItemTest extends TestCase {

    use DatabaseMigrations;

    public $order_item;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->order_item = OrderItem::factory()->create();
    }

    /** @test */
    public function belongs_to_a_order()
    {
        $this->assertInstanceOf(Order::class, $this->order_item->order);
    }

    /** @test */
    public function the_item_can_be_related_to_a_article()
    {
        $order_item = OrderItem::factory()->create(['itemable_type' => Article::class, 'itemable_id' => Article::factory()->create()->id]);
        $this->assertInstanceOf(Article::class, $order_item->itemable);
    }

    /** @test */
    public function the_item_can_be_realated_to_a_page()
    {
        $order_item = OrderItem::factory()->create(['itemable_type' => Page::class, 'itemable_id' => Page::factory()->create()->id]);
        $this->assertInstanceOf(Page::class, $order_item->itemable);
    }

    /** @test */
    public function has_a_original_itemable_data()
    {
        $order_item = OrderItem::factory()->create(['original_itemable_data'=>json_encode(Article::factory()->create()->toArray())]);
        $this->assertIsArray($order_item->original_itemable_data);
    }

    /** @test */
    public function can_have_a_price()
    {
        $this->assertArrayHasKey('price', $this->order_item->toArray());
        $this->assertIsFloat($this->order_item->price);
    }

    /** @test */
    public function can_have_a_quantity()
    {
        $this->assertArrayHasKey('quantity', $this->order_item->toArray());
        $this->assertIsFloat($this->order_item->quantity);
    }

}
