<?php


namespace Packages\Orders\tests\Feature\front;


use App\Classes\Repositories\Form\PublishRequiredFields;
use App\Models\Component;
use App\Models\Field;
use App\Models\Form;
use App\Models\Layout;
use App\Models\Setting;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Mail;
use Packages\Country\App\Models\Country;
use Packages\Country\App\Models\Currency;
use Packages\Country\App\Models\Zone;
use Packages\Orders\App\Constants\CheckoutTypes;
use Packages\Orders\App\Constants\FormTypes;
use Packages\Orders\App\Constants\OrderStatus;
use Packages\Orders\App\Mail\AdminNewOrderMail;
use Packages\Orders\App\Mail\UserNewOrderMail;
use Packages\Orders\App\Models\Checkout;
use Packages\Orders\App\Models\Order;
use Packages\PaymentsMethods\App\Models\PaymentMethod;
use Packages\shipping_methods\App\Models\ShippingMethod;
use Packages\shipping_methods\App\Models\ShippingPrice;
use Packages\Store\app\Classes\Front\Shoppingcart\Cart;
use Packages\Store\app\Models\Product;
use Packages\Voucher\app\Models\Voucher;
use Tests\TestCase;
use Faker\Generator as Faker;

class FastCheckoutTest extends TestCase {

    use DatabaseMigrations;

    private $checkout;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        if(! env('APP_STORE'))
        {
            die('O modulo store deve estar ativo');
        }
        Setting::factory()->create(
            ['name'=>'payment_methods',
             'data'=>[["provider"=>"Packages\\PaymentsMethods\\Providers\\EasyPay\\EasyPay","accountId"=>"4b675448-fd4d-4c97-bd6f-7817663a0cf9","ApiKey"=>"93e83fd2-9093-447d-b964-56ae653c625a"]]
            ]);
        $this->checkout = Checkout::factory()->create(['type' => CheckoutTypes::FAST]);
        $form = Form::factory()->create(['formable_type'=>Checkout::class, 'formable_id'=>$this->checkout->id, 'type'=>FormTypes::BILLING]);
        (new PublishRequiredFields($form))->create();
        PaymentMethod::factory()->create();
        $shipping_method = ShippingMethod::factory()->create();
        $zone = Zone::factory()->create();
        $shipping_method->zones()->attach($zone);
        $zone->countries()->attach(4);
        ShippingPrice::factory()->create(['shipping_method_id'=>$shipping_method->id, 'priceable_type'=>Zone::class, 'priceable_id'=>$zone->id, 'min_volume'=>0, 'max_volume'=>1000000, 'min_weight'=>0, 'max_weight'=>100000, 'price'=>10000, 'free_order_price'=>1000000000]);
    }

    /** @test */
    public function the_setup_its_correctly_setted()
    {
        $this->assertInstanceOf(Form::class, $this->checkout->billingForm());
        $this->assertInstanceOf(Field::class, $this->checkout->billingForm()->fields()->first());
        $this->assertCount(1, PaymentMethod::all());
        $this->assertCount(2, ShippingMethod::all());
    }

    /** @test */
    public function a_user_can_see_the_fast_checkout_page()
    {
        $response = $this->get(route('checkout.show', ['checkout'=>$this->checkout->id]));

        $response->assertStatus(200);
    }

    /** @test */
    public function if_the_layout_id_its_not_set_the_view_loaded_its_the_defined_on_the_packagae()
    {
        $view_loaded = 'order::front.core.layout';
        $response = $this->get(route('checkout.show', ['checkout'=>$this->checkout->id]));
        $response->assertStatus(200);
        $response->assertViewIs($view_loaded);
    }

    /** @test */
    public function if_the_layout_id_its_seted_the_view_loaded_its_the_defined_on_the_layout()
    {
        $layout = Layout::factory()->create(['path'=>'front.core.layout']);
        $view_loaded = $layout->path;
        $this->checkout->layout_id = $layout->id;
        $this->checkout->save();
        $response = $this->get(route('checkout.show', ['checkout'=>$this->checkout->id]));
        $response->assertStatus(200);
        $response->assertViewIs($view_loaded);
    }

    /** @test */
    public function the_variable_checkout_its_passed_to_view_and_its_object_type_checkout()
    {
        $response = $this->get(route('checkout.show', ['checkout' => $this->checkout->id]));

        $response->assertStatus(200);
        $response->assertViewHas('checkout', $this->checkout);
    }

    /** @test */
    public function the_variable_sections_its_passed_to_view()
    {
        $response = $this->get(route('checkout.show', ['checkout' => $this->checkout->id]));

        $response->assertStatus(200);
        $response->assertViewHas('sections', $this->checkout->sections);
    }

    /** @test */
    public function the_variable_cart_its_passed_to_view()
    {
        $this->generateCart();
        $response = $this->get(route('checkout.show', ['checkout' => $this->checkout->id]));
        $response->assertViewHas('cart', $this->getCart());
    }

    /** @test */
    public function on_checkout_submission_the_cart_cant_be_empty()
    {
        $data = [];
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionHasErrors(['cart']);
    }

    /** @test */
    public function on_checkout_if_the_billing_form_its_active_the_fields_must_be_validated()
    {
        $data = [];
        foreach($this->checkout->billingForm()->fields as $field)
        {
            $data[$field->name] = '';
        }
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        foreach($this->checkout->billingForm()->fields as $field)
        {
            if(in_array('required', $field->rules))
            {
                $response->assertSessionHasErrors([$field->name]);
            }
        }

    }

    /** @test */
    public function on_checkout_if_the_shipping_form_its_active_the_fields_must_be_validated()
    {
        $data = [];
        $form = Form::factory()->create(['formable_type'=>Checkout::class, 'formable_id'=>$this->checkout->id, 'type'=>FormTypes::SHIPPING]);
        (new PublishRequiredFields($form))->create();

        foreach($form->fields as $field)
        {
            $data[$field->name] = '';
        }
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        foreach($form->fields as $field)
        {
            if(in_array('required', $field->rules))
            {
                $response->assertSessionHasErrors([$field->name]);
            }
        }
    }

    /** @test */
    public function on_checkout_submit_the_option_payment_method_id_must_be_selected()
    {
        $data = ['payment_method_id'=>''];
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionHasErrors(['payment_method_id']);
    }

    /** @test */
    public function on_checkout_submit_the_option_payment_method_is_selected_has_no_error()
    {
        $data = ['payment_method_id'=>PaymentMethod::first()->id];
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionDoesntHaveErrors(['payment_method_id']);
    }

    /** @test */
    public function on_checkout_submit_the_option_shippment_method_id_must_be_selected()
    {
        $data = ['shipping_method_id'=>''];
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionHasErrors(['shipping_method_id']);
    }

    /** @test */
    public function on_checkout_submit_the_option_shippment_method_is_selected_has_no_error()
    {
        $data = ['shippment_method_id'=> ShippingMethod::first()->id];
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionDoesntHaveErrors(['shippment_method_id']);
    }

    /** @test */
    public function on_form_submission_if_all_required_fields_are_filled_the_user_its_redirected_to_other_page()
    {
        $data = $this->generateCheckoutData();
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionDoesntHaveErrors();
    }

    /** @test */
    public function on_form_submission_the_status_its_setted_to_pending()
    {
        $this->withoutExceptionHandling();
        $data = $this->generateCheckoutData();
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['status'=>OrderStatus::PENDING, 'billing_address_data'=>json_encode($this->generateBillingData())]);
    }

    /** @test */
    public function on_form_submission_the_billing_data_its_saved_on_database()
    {
        $this->withoutExceptionHandling();
        $data = $this->generateCheckoutData();
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['billing_address_data'=>json_encode($this->generateBillingData())]);
    }

    /** @test */
    public function on_form_submission_if_emails_receivers_are_setted_on_the_checkout_a_email_are_send()
    {
        $this->withoutExceptionHandling();
        $data = $this->generateCheckoutData();
        $this->checkout->email_receivers = ['fmagalhaes@4por4.pt'];
        $this->checkout->save();
        Mail::fake();
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertSessionHasNoErrors();
        Mail::assertSent(AdminNewOrderMail::class);
        Mail::assertSent(UserNewOrderMail::class);
    }

    /** @test */
    public function on_form_submission_the_shipping_data_its_saved_on_database()
    {
        $this->withoutExceptionHandling();
        $data = $this->generateCheckoutData();
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['shipping_address_data'=>json_encode($this->generateShippingData())]);
    }

    /** @test */
    public function on_form_submission_the_billing_keys_its_saved_on_database()
    {
        $this->withoutExceptionHandling();
        $data = $this->generateCheckoutData();
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['billing_address_keys'=>json_encode($this->generateBillingKeys())]);
    }

    /** @test */
    public function on_form_submission_the_shipping_keys_its_saved_on_database()
    {
        $this->withoutExceptionHandling();
        $data = $this->generateCheckoutData();
        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['shipping_address_keys'=>json_encode($this->generateShippingKeys())]);
    }

    /** @test */
    public function on_form_submission_the_total_for_the_items_its_the_sum_of_the_prices_added_to_the_cart()
    {
        $data = $this->generateCheckoutData();
        $cart = new Cart(session());
        $product = Product::factory()->create();
        $cart->add($product, 1);

        $this->assertCount(2, Product::all());
        $expected_total = round(Product::all()->sum(function($item){
            return $item->getBuyablePrice();
        }),2);

        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['total'=> $expected_total, 'status'=>OrderStatus::PENDING, 'billing_address_data'=>json_encode($this->generateBillingData())]);
    }

    /** @test */
    public function on_form_submissions_the_order_items_are_saved_on_the_database()
    {
        $data = $this->generateCheckoutData();
        $cart = new Cart(session());
        $product = Product::factory()->create();
        $cart->add($product, 1);

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        foreach(Product::all() as $product)
        {
            $this->assertDatabaseHas('order_items', ['itemable_id'=>$product->id, 'itemable_type'=>Product::class]);
        }
    }

    /** @test */
    public function the_tax_for_the_given_region_its_saved_on_the_order()
    {
        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['percentage_taxes'=>Country::first()->regions()->first()->defaultTax()]);
    }

    /** @test */
    public function the_region_selected_for_the_shipping_data_its_saved_on_database()
    {
        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['region_id'=>Country::first()->regions()->first()->id]);
    }

    /** @test */
    public function the_country_selected_for_the_shipping_data_its_saved_on_database()
    {
        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['region_id'=>Country::first()->id]);
    }

    /** @test */
    public function the_total_taxes_its_correcty_calculated_when_the_taxes_are_already_included()
    {
        $data = $this->generateCheckoutData();
        $cart = new Cart(session());
        $product = Product::factory()->create(['stock'=>4]);
        $cart->add($product, 2);
        $total_products = round(Product::orderBy('id', 'asc')->first()->getBuyablePrice()*1 + $product->getBuyablePrice()*2,2);
        $expected_total = $total_products - round($total_products/(1+ Country::first()->regions()->first()->defaultTax()/100), 2);

        $response = $this->post(route('checkout.store', ['checkout'=>$this->checkout->id]), $data);
        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['total'=> $total_products, 'total_taxes'=>$expected_total]);
    }

    /** @test */
    public function the_data_for_the_shipping_its_correctle_seeted()
    {
        $cart = new Cart(session());
        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $shipping_method = ShippingMethod::find($this->generateCheckoutData()['shipping_method_id']);
        $zones = array_merge(Country::find($data['shipping_country'])->zones->pluck('id')->toArray(), []);
        $shipping_method->setShippingPriceByAttributesAndCountry($zones, $cart->getShippmentWeight(), $cart->getShippmentVolume());

        $this->assertDatabaseHas('orders', ['shipping_method_id'=> $this->generateCheckoutData()['shipping_method_id']]);
        $this->assertDatabaseHas('orders', ['original_shipping_method'=> json_encode($shipping_method->toArray())]);
    }

    /** @test */
    public function if_a_voucher_its_used_to_conclude_the_order_its_saved_on_the_database()
    {
        $voucher = Voucher::factory()->create();
        $data = $this->generateCheckoutData();

        $voucher_response = $this->post(route('voucher.post'), ['code'=>$voucher->code]);
        $voucher_response->assertStatus(200);
        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['voucher_object'=> json_encode($voucher->fresh()->toArray())]);

    }

    /** @test */
    public function the_currency_rate_and_currency_id_its_save_on_the_order_when_the_default_its_used()
    {
        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['currency_id'=> (new Currency())->getActiveCurrency()->id]);
        $this->assertDatabaseHas('orders', ['currency_rate'=>(new Currency())->getActiveCurrency()->rate]);
    }

    /** @test */
    public function the_currency_rate_its_saved_on_the_order_when_a_diferent_one_its_used_by_the_default()
    {
        $data = $this->generateCheckoutData();

        $country = Country::find(32);
        $country->currency_id = 34;
        $country->save();
        $curency = Currency::find(34);
        $curency->rate = 2;
        $curency->save();
        $response_rate = $this->patch(route('user.country.update', ['country_id'=>32, 'set_rate'=>1]));
        $response_rate->assertStatus(200);

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['currency_id'=> 34]);
        $this->assertDatabaseHas('orders', ['currency_rate'=>2]);
    }

    /** @test */
    public function the_voucher_discount_its_correctly_saved_on_the_database()
    {
        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>1]);
        $data = $this->generateCheckoutData();
        $cart = new Cart(session());
        $cart->destroy();;

        $product = Product::factory()->create(['price'=>5, 'promoted_price'=>5]);
        $voucher->products()->attach($product->id);
        $cart->add($product, 1);


        $voucher_response = $this->post(route('voucher.post'), ['code'=>$voucher->code]);
        $voucher_response->assertStatus(200);
        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['voucher_discount'=> 0.5]);
    }

    /** @test */
    public function the_voucher_discount_its_corretly_considerated_on_the_grand_total()
    {
        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>1]);
        $data = $this->generateCheckoutData();

        $cart = new Cart(session());
        $cart->destroy();;

        $product = Product::factory()->create(['price'=>5, 'promoted_price'=>5]);
        $voucher->products()->attach($product->id);
        $cart->add($product, 1);


        $voucher_response = $this->post(route('voucher.post'), ['code'=>$voucher->code]);
        $voucher_response->assertStatus(200);
        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['grand_total'=> 10004.5]);


    }

    /** @test */
    public function if_a_diferent_currency_with_a_dirent_rate_its_used_for_the_checkout_all_the_fields_referents_on_price_must_assume_the_currency_rate()
    {
        $voucher = Voucher::factory()->create(['percentage_discount'=>10, 'discount_value'=>1]);
        $data = $this->generateCheckoutData();

        $cart = new Cart(session());
        $cart->destroy();;

        $product = Product::factory()->create(['price'=>5, 'promoted_price'=>5]);
        $voucher->products()->attach($product->id);
        $cart->add($product, 1);

        $country = Country::find(32);
        $country->currency_id = 34;
        $country->save();
        $curency = Currency::find(34);
        $curency->rate = 2;
        $curency->save();
        $response_rate = $this->patch(route('user.country.update', ['country_id'=>32, 'set_rate'=>1]));
        $response_rate->assertStatus(200);


        $voucher_response = $this->post(route('voucher.post'), ['code'=>$voucher->code]);
        $voucher_response->assertStatus(200);
        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['total_discount'=>1]);
        $this->assertDatabaseHas('orders', ['grand_total'=> 20009]);

    }


    /** @test */
    public function if_the_order_has_a_country_with_a_different_price_for_the_shipping_the_price_its_correctly_seeted()
    {
        $cart = new Cart(session());
        $data = $this->generateCheckoutData();

        $this->assertEquals(4, $data['shipping_country']);
        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['shipping_method_id'=> $this->generateCheckoutData()['shipping_method_id']]);
        $shipping_method = ShippingMethod::find($this->generateCheckoutData()['shipping_method_id']);

        $zones = array_merge(Country::find($data['shipping_country'])->zones->pluck('id')->toArray(), []);
        $shipping_method->setShippingPriceByAttributesAndCountry($zones, $cart->getShippmentWeight(), $cart->getShippmentVolume());
        $this->assertDatabaseHas('orders', ['original_shipping_method'=> json_encode($shipping_method->toArray())]);
        $this->assertDatabaseHas('orders', ['total_shipping'=>10000]);
    }

    /** @test */
    public function if_the_order_has_a_shipping_order_for_a_region_with_a_higher_price_for_the_shipping_its_this_higger_considered()
    {
        $cart = new Cart(session());
        $data = $this->generateCheckoutData();
        $zone = Zone::factory()->create();
        $zone->regions()->attach(Country::first()->regions->first()->id);
        $shipping_method = ShippingMethod::first();
        $shipping_method->zones()->attach($zone);
        ShippingPrice::factory()->create(['shipping_method_id'=>$shipping_method->id, 'priceable_type'=>Zone::class, 'priceable_id'=>$zone->id, 'min_volume'=>0, 'max_volume'=>1000000, 'min_weight'=>0, 'max_weight'=>100000, 'price'=>20000, 'free_order_price'=>1000000000]);
        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        //$this->assertDatabaseHas('orders', ['original_shipping_method'=> json_encode($shipping_method->toArray())]);
        $this->assertDatabaseHas('orders', ['total_shipping'=>20000]);

    }

    /** @test */
    public function if_the_total_of_a_order_its_bigger_then_the_default_free_price_the_shippment_cost_its_free()
    {
        $cart = new Cart(session());
        $data = $this->generateCheckoutData();
        $shipping_price = ShippingPrice::first();
        $shipping_price->free_order_price = 1;
        $shipping_price->save();
        $this->assertEquals(4, $data['shipping_country']);
        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['shipping_method_id'=> $this->generateCheckoutData()['shipping_method_id']]);
        $shipping_method = ShippingMethod::find($this->generateCheckoutData()['shipping_method_id']);

        $zones = array_merge(Country::find($data['shipping_country'])->zones->pluck('id')->toArray(), []);
        $shipping_method->setShippingPriceByAttributesAndCountry($zones, $cart->getShippmentWeight(), $cart->getShippmentVolume());
        $this->assertDatabaseHas('orders', ['original_shipping_method'=> json_encode($shipping_method->toArray())]);
        $this->assertDatabaseHas('orders', ['total_shipping'=>0]);
    }

    /** @test */
    public function the_data_for_the_payment_id_its_correctly_setted()
    {
        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['payment_method_id'=> $this->generateCheckoutData()['payment_method_id']]);
        $this->assertDatabaseHas('orders', ['original_payment_method'=> json_encode(PaymentMethod::find($this->generateCheckoutData()['payment_method_id'])->toArray())]);

    }

    /** @test */
    public function if_the_stock_for_a_given_product_dont_exists_the_order_fail()
    {
        $product = Product::factory()->create(['stock'=>0]);
        $cart = new Cart(session());
        $cart->add($product, 1);

        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionHasErrors(['stock']);

        $this->assertEquals(0, $product->fresh()->stock);
    }

    /** @test */
    public function when_a_order_its_published_the_stock_of_the_products_are_updated()
    {
        $product = Product::factory()->create(['stock'=>5]);
        $cart = new Cart(session());
        $cart->add($product, 1);

        $data = $this->generateCheckoutData();

        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);
        $response->assertStatus(302);
        $response->assertSessionDoesntHaveErrors();

        $this->assertEquals(4, $product->fresh()->stock);
    }

    /** @test */
    public function when_the_data_its_correctly_submitted_the_generate_payment_data_its_called()
    {
        $data = $this->generateCheckoutData();

        $order = $this->createMock(Order::class);
        $order->method('generatePaymentData')->willReturn('payment-data');
        //$order->expects($this->once())->method('generatePaymentData');
        $this->app->instance(Order::class, $order);


        $response = $this->post(route('checkout.store', ['checkout' => $this->checkout->id]), $data);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('orders', ['payment_method_id'=> $this->generateCheckoutData()['payment_method_id']]);

    }



    private function getCart()
    {
        $cart = new Cart(session());

        return [
            'content' => $cart->getContent(),
            'content_count' => $cart->count(),
            'total' => $cart->total()
        ];
    }

    private function generateCart()
    {
        $cart = new Cart(session());

        $product = Product::factory()->create();
        $cart->add($product, 1);
    }

    public function generateCheckoutData()
    {
        $this->generateCart();
        $data = ['shipping_method_id'=> ShippingMethod::first()->id, 'payment_method_id'=>PaymentMethod::first()->id];
        return array_merge($data, $this->generateBillingData(),$this->generateShippingData());
    }

    private function generateBillingData()
    {
        $data = [];
        foreach($this->checkout->billingForm()->fields as $key=>$field)
        {
            $data[$field->name] = 'word'.$key;
            if($field->name == 'billing_email')
            {
                $data[$field->name] = 'reco@test.pt';
            }
        }
        return $data;
    }

    private function generateBillingKeys()
    {
        foreach($this->checkout->billingForm()->fields as $field)
        {
            $data[$field->name] = $field->label;
        }
        return $data;
    }

    private function generateShippingData()
    {
        $data = [];
        $form = Form::factory()->create(['formable_type'=>Checkout::class, 'formable_id'=>$this->checkout->id, 'type'=>FormTypes::SHIPPING]);
        (new PublishRequiredFields($form))->create();
        foreach($this->checkout->shippingForm()->fields as $key=>$field)
        {
            $data[$field->name] = 'word'.$key;
            if($field->name == 'shipping_country')
            {
                $data[$field->name] = Country::first()->id;
            }
            if($field->name == 'shipping_region')
            {
                $data[$field->name] = Country::first()->regions()->first()->id;
            }

        }
        return $data;
    }

    private function generateShippingkeys()
    {
        $data = [];
        $form = Form::factory()->create(['formable_type'=>Checkout::class, 'formable_id'=>$this->checkout->id, 'type'=>FormTypes::SHIPPING]);
        (new PublishRequiredFields($form))->create();
        foreach($this->checkout->shippingForm()->fields as $field)
        {
            $data[$field->name] = $field->label;
        }
        return $data;
    }



}
