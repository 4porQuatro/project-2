<?php


namespace Packages\Orders\tests\Feature\front;


use App\Classes\Repositories\Form\PublishRequiredFields;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Country\App\Models\Country;
use Packages\Orders\App\Constants\CheckoutTypes;
use Packages\Orders\App\Constants\FormTypes;
use Packages\Orders\App\Constants\OrderStatus;
use Packages\Orders\App\Models\Checkout;
use Packages\Orders\App\Models\Order;
use Packages\PaymentsMethods\App\Models\PaymentMethod;
use Packages\PaymentsMethods\Providers\EasyPay\EasyPay;
use Packages\Reserved\App\Models\ReservedArea;
use Packages\shipping_methods\App\Models\ShippingMethod;
use Packages\Store\app\Models\Product;
use Tests\TestCase;

class OrdersTest extends TestCase {

    use DatabaseMigrations;

    public $user;
    public $orders;
    public $reserved;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->reserved = ReservedArea::factory()->create();
        $this->user = User::factory()->create(['reserved_area_id'=>$this->reserved->id]);
        $this->generateOrderWithAllDetails(OrderStatus::PENDING, 4, $this->user->id);
        $this->generateOrderWithAllDetails(OrderStatus::PENDING, 20);
    }

    /** @test */
    public function a_non_authenticated_user_cant_get_the_order_details()
    {
        $response = $this->get(route('front.orders.get'));
        $response->assertStatus(302);
    }

    /** @test */
    public function a_authenticated_user_can_get_all_their_orders()
    {
        $this->actingAs($this->user);
        $response = $this->get(route('front.orders.get'));

        $result = $response->baseResponse->original;
        $this->assertCount(4, $response->baseResponse->original);

    }


    private function generateOrderWithAllDetails($status,$qty=1, $user = null)
    {
        $checkout = Checkout::factory()->create(['type'=>CheckoutTypes::NORMAL]);
        $form_billing = $checkout->forms()->create(['name' => 'Form biling data', 'type' => FormTypes::BILLING]);
        (new PublishRequiredFields($form_billing))->create();
        $form_shipping = $checkout->forms()->create(['name'=> 'Form shipping data', 'type'=>FormTypes::SHIPPING]);
        (new PublishRequiredFields($form_shipping))->create();
        $payment_method = PaymentMethod::factory()->create(['provider'=>EasyPay::class, 'provider_method'=>'mb']);
        $shipping_method = ShippingMethod::factory()->create();
        $country = Country::first();
        $data = [
            'user_id'=>$user,
            'status'=>$status,
            'total'=>30,
            'total_taxes'=>1,
            'total_shipping'=>5,
            'total_discount'=>3,
            'billing_address_keys'=>$checkout->billingForm()->fields->pluck('label', 'name')->toArray(),
            'billing_address_data'=>$this->generateBillingData($checkout),
            'shipping_address_keys'=>$checkout->ShippingForm()->fields->pluck('label', 'name')->toArray(),
            'shipping_address_data'=>$this->generateShippingData($checkout),
            'checkout_id'=>$checkout->id,
            'country_id'=>$country->id,
            'region_id'=>$country->regions()->first()->id,
            'payment_method_id'=>$payment_method->id,
            'shipping_method_id'=>$shipping_method->id,
            'original_payment_method'=>$payment_method->toArray(),
            'original_shipping_method'=>$shipping_method->toArray(),
            'percentage_taxes'=>5/30*100,
            'provider_payment_data'=>'{"status":"ok","message":["Your request was successfully created"],"id":"0118e891-faa2-4ccf-a89c-837c8e7ce88d","method":{"type":"mb","status":"pending","entity":"11683","reference":"832033720"},"customer":{"id":"0511d869-7750-421d-a800-4a04ff865b88"}}'

        ];

        return Order::factory($qty)->create($data);
    }

    public function generateOrderItem($order)
    {
        $item = Product::factory()->create();

        $order_item = $order->items()->create([
            'itemable_type'=>get_class($item),
            'itemable_id'=>$item->id,
            'original_itemable_data'=>$item->toArray(),
            'price'=>30,
            'quantity'=>1,
        ]);

        return $order_item;
    }

    private function generateBillingData($checkout)
    {
        $data = [];
        foreach($checkout->billingForm()->fields as $key=>$field)
        {
            $data[$field->name] = 'word'.$key;
            if($field->name == 'billing_email')
            {
                $data[$field->name] = 'reco@test.pt';
            }
        }
        return $data;
    }

    private function generateShippingData($checkout)
    {
        $data = [];
        foreach($checkout->shippingForm()->fields as $key=>$field)
        {
            $data[$field->name] = 'word'.$key;
            if($field->name == 'shipping_email')
            {
                $data[$field->name] = 'reco@test.pt';
            }
        }
        return $data;
    }


}
