<?php


namespace Packages\Country\tests\Unit;


use App\Models\Category;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Collection;
use Packages\Country\App\Models\Country;
use Packages\Country\App\Models\Currency;
use Packages\Country\App\Models\Tax;
use Packages\Country\App\Models\Zone;
use Tests\TestCase;

class CountryTest extends TestCase {

    use DatabaseMigrations;
    public $country;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->country = Country::first();
    }

    /** @test */
    public function as_a_country_code()
    {
        $this->assertArrayHasKey('code', $this->country->toArray());
        $this->assertNotEmpty($this->country->code);
    }

    /** @test */
    public function as_a_name()
    {
        $this->assertArrayHasKey('name', $this->country->toArray());
        $this->assertNotEmpty($this->country->name);
    }

    /** @test */
    public function as_a_active_state()
    {
        $this->assertArrayHasKey('active', $this->country->fresh()->toArray());
        $this->assertNotEmpty($this->country->active);
        $this->assertTrue($this->country->active);
    }

    /** @test */
    public function a_country_has_many_taxes()
    {
        Tax::factory(3)->create(['taxable_id'=>$this->country->id]);
        $this->assertInstanceOf(Tax::class, $this->country->taxes->first());
        $this->assertCount(3, $this->country->taxes);
    }

    /** @test */
    public function a_country_has_image_flag()
    {
        $country = Country::where('code', 'pt')->first();
        $this->assertFileExists(public_path($country->getFlagImage()));
    }

    /** @test */
    public function a_country_has_a_default_tax()
    {
        $this->assertNotEmpty($this->country->defaultTax());
        $this->assertEquals(23, $this->country->defaultTax());
    }

    /** @test */
    public function a_country_can_belong_many_zones()
    {
        $zones = Zone::factory(2)->create();

        $this->country->zones()->attach($zones);

        $this->assertCount(3, $this->country->zones);
        $this->assertInstanceOf(Zone::class, $this->country->zones->first());

    }

    /** @test */
    public function a_country_has_a_currency()
    {
        $country = Country::first();

        $this->assertInstanceOf(Currency::class, $country->currency);
    }


    /** @test */
    public function its_possible_to_retrieve_the_country_flag()
    {
        $country = Country::first();
        $this->assertNotNull($country->getFlag());
    }

    /** @test */
    public function its_possible_to_retrieve_the_name()
    {
        $country = Country::first();
        $this->assertNotNull($country->getName());
    }

    /** @test */
    public function an_product_can_have_multiple_categories()
    {
        $categories = Category::factory(4)->create();
        $country = Country::first();
        $country->categories()->sync($categories);
        $this->assertInstanceOf(Collection::class, $country->categories);
        $this->assertInstanceOf(Category::class, $country->categories->first());
    }




}
