<?php

namespace Packages\Country\tests\Unit;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Country\App\Classes\Front\SessionVariable;
use Packages\Country\App\Models\Currency;
use Tests\TestCase;

class CurrencyTest extends TestCase {

    use DatabaseMigrations;

    public $currency;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->currency = Currency::where('code', 'EUR')->first();
    }

    /** @test */
    public function on_migrations_all_currencies_are_automacly_generated()
    {
        $this->assertTrue(Currency::count() > 20);
    }

    /** @test */
    public function a_currency_has_all_the_attributes()
    {
        $attributes  = ['code', 'symbol', 'active', 'name', 'name_plural', 'symbol_native', 'decimal_digits', 'rate'];
        foreach($attributes as $att)
        {
            $this->assertNotNull($this->currency->$att);
        }
    }

    /** @test */
    public function a_currency_can_have_multiple_countries()
    {
        $this->assertTrue($this->currency->countries->count() > 3);
    }

    /** @test */
    public function a_default_currency_exists()
    {
        $this->assertEquals($this->currency, Currency::getDefault());
    }

    /** @test */
    public function its_possible_get_the_current_active_currency_for_a_given_session()
    {
        $this->assertEquals($this->currency,  Currency::getActiveCurrency());
        $new_currency = Currency::where('code', 'USD')->first();
        SessionVariable::setPriceRate($new_currency);
        $this->assertEquals($new_currency, Currency::getActiveCurrency());

    }



}
