<?php


namespace Packages\Country\tests\Unit;


use Illuminate\Foundation\Testing\DatabaseMigrations;
use Packages\Country\App\Models\Country;
use Packages\Country\App\Models\Region;
use Packages\Country\App\Models\Tax;
use Tests\TestCase;

class RegionTest extends TestCase {

    use DatabaseMigrations;
    public $region;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->region = Region::first();
    }

    /** @test */
    public function belongs_to_a_country()
    {
        $this->assertInstanceOf(Country::class, $this->region->country);
    }

    /** @test */
    public function as_a_name()
    {
        $this->assertArrayHasKey('name', $this->region->toArray());
        $this->assertNotEmpty($this->region->name);
    }

    /** @test */
    public function as_a_code()
    {
        $this->assertArrayHasKey('code', $this->region->toArray());
        $this->assertNotEmpty($this->region->code);
    }

    /** @test */
    public function _has_many_taxes()
    {
        Tax::factory(3)->create(['taxable_id'=>$this->region->id, 'taxable_type'=>Region::class]);
        $this->assertInstanceOf(Tax::class, $this->region->taxes->first());
        $this->assertCount(3, $this->region->taxes);
    }

    /** @test */
    public function its_possible_to_retrieve_the_country_flag()
    {
        $region = Region::first();
        $this->assertNotNull($region->getFlag());
        $this->assertEquals($region->country->flag_image, $region->getFlag());
    }

    /** @test */
    public function its_possible_to_retrieve_the_name()
    {
        $region = Region::first();
        $this->assertNotNull($region->getName());
        $this->assertEquals($region->country->name.' - '.$region->name, $region->getName());

    }


}
