<?php

namespace Packages\Store\tests\Unit;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Collection;
use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeFamily;
use Tests\TestCase;

class AttributeFamilyTest extends TestCase
{
    use DatabaseMigrations;

    public $attribute_family;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $variant_attributes = Attribute::factory(2)->create(['unique_per_product'=>false])->fresh();
        $unique_per_product_attributes = Attribute::factory(2)->create(['unique_per_product'=>true])->fresh();
        $attributes_ids = array_merge($variant_attributes->pluck('id')->toArray(), $unique_per_product_attributes->pluck('id')->toArray());

        $attribute_family = AttributeFamily::factory()->create()->fresh();
        $attribute_family->attributes()->sync($attributes_ids);
        $this->attribute_family = $attribute_family->fresh();
    }

    /**  @test */
    public function has_a_title()
    {
        $this->assertArrayHasKey('title', $this->attribute_family->toArray());
        $this->assertIsString($this->attribute_family->title);
    }

    /**  @test */
    public function has_attributes()
    {
        $this->assertNotEmpty($this->attribute_family->attributes);
        $this->assertInstanceOf(Collection::class, $this->attribute_family->attributes);
        $this->assertInstanceOf(Attribute::class, $this->attribute_family->attributes->first());
    }

    /**  @test */
    public function has_unique_per_products_attributes()
    {
        $this->assertNotEmpty($this->attribute_family->uniquePerProductAttributes);
        $this->assertInstanceOf(Collection::class, $this->attribute_family->uniquePerProductAttributes);

        foreach ($this->attribute_family->uniquePerProductAttributes as $attribute)
        {
            $this->assertInstanceOf(Attribute::class, $attribute);
            $this->assertTrue($attribute->unique_per_product);
        }
    }

    /**  @test */
    public function has_variant_attributes()
    {
        $this->assertNotEmpty($this->attribute_family->variantAttributes);
        $this->assertInstanceOf(Collection::class, $this->attribute_family->variantAttributes);

        foreach ($this->attribute_family->variantAttributes as $attribute)
        {
            $this->assertInstanceOf(Attribute::class, $attribute);
            $this->assertFalse($attribute->unique_per_product);
        }
    }
}
