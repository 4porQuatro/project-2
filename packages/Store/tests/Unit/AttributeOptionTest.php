<?php

namespace Packages\Store\tests\Unit;

use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeOption;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class AttributeOptionTest extends TestCase
{
    use DatabaseMigrations;

    public $attribute;
    public $attribute_option;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->attribute = Attribute::factory()->create()->fresh();
        $this->attribute_option = AttributeOption::factory()->create(['attribute_id'=>$this->attribute->id])->fresh();
    }

    /**  @test */
    public function has_a_attribute_id()
    {
        $this->assertArrayHasKey('attribute_id', $this->attribute_option->toArray());
        $this->assertIsInt($this->attribute_option->attribute_id);
    }

    /**  @test */
    public function has_a_attribute()
    {
        $this->assertNotEmpty($this->attribute_option->attribute);
        $this->assertInstanceOf(Attribute::class, $this->attribute_option->attribute);
        $this->assertEquals($this->attribute_option->attribute->id, $this->attribute->id);
    }

    /** @test */
    public function has_a_priority()
    {
        $this->assertArrayHasKey('priority', $this->attribute_option->toArray());
        $this->assertIsInt($this->attribute_option->priority);
    }

    /**  @test */
    public function has_a_title()
    {
        $this->assertArrayHasKey('title', $this->attribute_option->toArray());
        $this->assertIsString($this->attribute_option->title);
    }

    /**  @test */
    public function has_a_body()
    {
        $this->assertArrayHasKey('body', $this->attribute_option->toArray());
        $this->assertIsString($this->attribute_option->body);
    }

    /**  @test */
    public function can_have_null_swatch_value()
    {
        $this->assertArrayHasKey('swatch_value', $this->attribute_option->toArray());
        $this->assertNull($this->attribute_option->swatch_value);
    }

    /**  @test */
    public function can_have_a_swatch_value()
    {
        $another_attribute_option = AttributeOption::factory()->create(
            [
                'attribute_id'=>$this->attribute->id,
                'swatch_value'=>'#FFFFFF'
            ])->fresh();

        $this->assertArrayHasKey('swatch_value', $another_attribute_option->toArray());
        $this->assertIsString($another_attribute_option->swatch_value);
    }

    /** @test */
    public function can_have_a_images()
    {
        $this->assertEquals([], $this->attribute_option->images);

        $images = [
            ['path'=>'images/image1.png', 'alt_text'=>'ola'],
            ['path'=>'images/image2.png', 'alt_text'=>'mundo'],
        ];

        $this->attribute_option->update(['images'=>$images]);
        $this->attribute_option = $this->attribute_option->fresh();

        $this->assertArrayHasKey('images', $this->attribute_option->toArray());
    }
}
