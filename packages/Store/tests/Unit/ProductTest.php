<?php

namespace Packages\Store\tests\Unit;

use App\Models\Category;
use App\Models\Layout;
use App\Models\Setting;
use Packages\Country\App\Models\Currency;
use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeFamily;
use Packages\Store\app\Models\AttributeOption;
use Packages\Store\app\Models\Product;
use App\Models\Section;
use App\Models\Seo;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Collection;
use Tests\TestCase;

class ProductTest extends TestCase
{
    use DatabaseMigrations;

    public $product;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $attribute_family = AttributeFamily::factory()->create()->fresh();
        $this->product = Product::factory()->create([
            'attribute_family_id'=>$attribute_family->id,
        ])->fresh();
    }

    /**  @test */
    public function can_have_a_null_parent_id()
    {
        $this->arrayHasKey('parent_id', $this->product->toArray());
        $this->assertNull($this->product->parent_id);
    }

    /**  @test */
    public function can_have_a_parent_id()
    {
        $another_product = Product::factory()->create(['parent_id'=>$this->product->id]);

        $this->assertArrayHasKey('parent_id', $another_product->toArray());
        $this->assertNotNull($another_product->parent_id);
    }

    /**  @test */
    public function have_a_attribute_family()
    {
        $this->arrayHasKey('attribute_family_id', $this->product->toArray());
        $this->assertNotNull($this->product->attribute_family_id);
        $this->assertEquals($this->product->family->id, $this->product->attribute_family_id);
        $this->assertInstanceOf(AttributeFamily::class, $this->product->family);
    }

    /**  @test */
    public function can_have_null_attribute_options()
    {
        $this->assertEmpty($this->product->attributeOptions);
        $this->assertInstanceOf(Collection::class, $this->product->attributeOptions);
    }

    /**  @test */
    public function can_have_attribute_options()
    {
        $attribute = Attribute::factory()->create()->fresh();
        $attribute_option = AttributeOption::factory()->create([
            'attribute_id'=>$attribute->id
        ])->fresh();

        $this->product->attributeOptions()->sync([$attribute_option->id]);
        $this->product = $this->product->fresh();

        $this->assertNotEmpty($this->product->attributeOptions);
        $this->assertInstanceOf(Collection::class, $this->product->attributeOptions);
        $this->assertInstanceOf(AttributeOption::class, $this->product->attributeOptions->first());
    }

    /** @test */
    public function can_have_a_images()
    {
        $this->assertEquals([], $this->product->images);

        $images = [
            ['path'=>'images/image1.png', 'alt_text'=>'ola'],
            ['path'=>'images/image2.png', 'alt_text'=>'mundo'],
        ];

        $this->product->update(['images'=>$images]);
        $this->product = $this->product->fresh();

        $this->assertArrayHasKey('images', $this->product->toArray());
    }

    /** @test */
    public function can_have_image_detail()
    {
        $this->assertEquals([],$this->product->images_detail);

        $images = [
            ['path'=>'images/image1.png', 'alt_text'=>'ola'],
            ['path'=>'images/image2.png', 'alt_text'=>'mundo'],
        ];

        $this->product->update(['images_detail'=>$images]);
        $this->product = $this->product->fresh();

        $this->assertArrayHasKey('images_detail', $this->product->toArray());
    }

    /** @test */
    public function if_a_variant_dont_have_images_it_usses_the_images_of_the_parent()
    {
        $images = [
            ['path'=>'images/image1.png', 'alt_text'=>'ola'],
            ['path'=>'images/image2.png', 'alt_text'=>'mundo'],
        ];

        $this->product->update(['images'=>$images]);
        $product = Product::factory()->create(['images'=>[], 'parent_id'=>$this->product->id]);

        $this->assertEquals($this->product->images, $product->images);
        $this->assertNotEmpty($this->product->images);

    }

    /** @test */
    public function if_a_variant_dont_have_images_detail_it_usses_the_images_of_the_parent()
    {
        $images = [
            ['path'=>'images/image1.png', 'alt_text'=>'ola'],
            ['path'=>'images/image2.png', 'alt_text'=>'mundo'],
        ];

        $this->product->update(['images_detail'=>$images]);
        $product = Product::factory()->create(['images_detail'=>[], 'parent_id'=>$this->product->id]);

        $this->assertEquals($this->product->images_detail, $product->images_detail);
        $this->assertNotEmpty($this->product->images_detail);

    }

    /** @test */
    public function has_a_atribute_current_curreny_for_the_price()
    {
        $product = Product::factory()->create(['images_detail'=>[], 'parent_id'=>$this->product->id]);
        $this->assertNotEmpty($product->currency_price);
        $this->assertInstanceOf(Currency::class, $product->currency_price);
    }



    /** @test */
    public function can_have_a_videos()
    {
        $this->assertEquals([], $this->product->images);

        $videos = [
            ['path'=>'videos/video.mp4', 'alt_text'=>'ola'],
            ['path'=>'videos/video2.png', 'alt_text'=>'mundo'],
        ];

        $this->product->update(['videos'=>$videos]);
        $this->product = $this->product->fresh();

        $this->assertArrayHasKey('videos', $this->product->toArray());
    }

    /** @test */
    public function can_have_a_docs()
    {
        $this->assertEquals([], $this->product->images);

        $docs = [
            ['path'=>'docs/doc1.pdf', 'alt_text'=>'ola'],
            ['path'=>'docs/doc2.pdf', 'alt_text'=>'mundo'],
        ];

        $this->product->update(['docs'=>$docs]);
        $this->product = $this->product->fresh();

        $this->assertArrayHasKey('docs', $this->product->toArray());
    }

    /** @test */
    public function has_a_default_layout_status()
    {
        $this->assertArrayHasKey('default_layout', $this->product->toArray());
        $this->assertIsBool($this->product->default_layout);
    }

    /** @test */
    public function has_a_priority()
    {
        $this->assertArrayHasKey('priority', $this->product->toArray());
        $this->assertIsInt($this->product->priority);
    }

    /** @test */
    public function has_a_layout_id()
    {
        $this->assertArrayHasKey('layout_id', $this->product->toArray());
        $this->assertNull($this->product->layout_id);
    }

    /** @test */
    public function has_a_price()
    {
        $this->assertArrayHasKey('price', $this->product->toArray());
        $this->assertIsFloat($this->product->price);
    }

    /** @test */
    public function has_a_promoted_price()
    {
        $this->assertArrayHasKey('promoted_price', $this->product->toArray());
        $this->assertIsFloat($this->product->promoted_price);
    }

    /** @test */
    public function has_a_stock()
    {
        $this->assertArrayHasKey('stock', $this->product->toArray());
        $this->assertIsInt($this->product->stock);
    }

    /** @test */
    public function has_a_has_variants()
    {
        $this->assertArrayHasKey('has_variants', $this->product->toArray());
        $this->assertIsBool($this->product->has_variants);
    }

    /** @test */
    public function has_a_sku()
    {
        $this->assertArrayHasKey('sku', $this->product->toArray());
        $this->assertIsString($this->product->sku);
    }

    /** @test */
    public function has_a_ref()
    {
        $this->assertArrayHasKey('ref', $this->product->toArray());
        $this->assertIsString($this->product->ref);
    }

    /**  @test */
    public function has_a_title()
    {
        $this->assertArrayHasKey('title', $this->product->toArray());
        $this->assertIsString($this->product->title);
    }

    /**  @test */
    public function has_a_slug()
    {
        $this->assertArrayHasKey('slug', $this->product->toArray());
        $this->assertIsString($this->product->slug);
    }

    /**  @test */
    public function has_a_small_body()
    {
        $this->assertArrayHasKey('small_body', $this->product->toArray());
        $this->assertIsString($this->product->small_body);
    }

    /**  @test */
    public function has_a_body()
    {
        $this->assertArrayHasKey('body', $this->product->toArray());
        $this->assertIsString($this->product->body);
    }

    /** @test */
    public function has_a_active_status()
    {
        $this->assertArrayHasKey('active', $this->product->toArray());
        $this->assertIsBool($this->product->active);
    }

    /** @test */
    public function has_a_promoted_status()
    {
        $this->assertArrayHasKey('promoted', $this->product->toArray());
        $this->assertIsBool($this->product->promoted);
    }

    /** @test */
    public function has_a_highlighted_status()
    {
        $this->assertArrayHasKey('highlighted', $this->product->toArray());
        $this->assertIsBool($this->product->highlighted);
    }

    /** @test */
    public function a_product_can_have_n_variations()
    {
        $number_variations = 6;

        $variations = Product::factory($number_variations)->create(['parent_id'=>$this->product->id]);

        $this->assertCount($number_variations, $this->product->variations);

        foreach ($this->product->variations as $product_variation)
        {
            $this->assertTrue(in_array($product_variation->id, $variations->pluck('id')->toArray()));
        }
    }

    /** @test */
    public function a_product_variation_is_also_a_product()
    {
        $variation = Product::factory()->create(['parent_id'=>$this->product->id]);

        $this->assertInstanceOf(Product::class, $variation);
    }

    /** @test */
    public function a_product_can_have_a_layout_associated()
    {
        $layout = Layout::factory()->create();
        $this->product->update(['layout_id'=>$layout->id]);

        $this->product = $this->product->fresh();

        $this->assertEquals($this->product->layout->id, $layout->id);
        $this->assertInstanceOf(Layout::class, $this->product->layout);

        $this->assertEquals($this->product->getLayout()->id, $layout->id);
        $this->assertInstanceOf(Layout::class, $this->product->getLayout());
    }

    /** @test */
    public function a_product_is_associated_with_the_default_layout_if_have_a_null_layout_id()
    {
        $default_layout = Layout::default()->first();

        $this->assertEmpty($this->product->layout_id);

        $this->assertNull($this->product->layout);

        $this->assertEquals($this->product->getLayout()->id, $default_layout->id);
        $this->assertInstanceOf(Layout::class, $this->product->getLayout());
    }

    /** @test */
    public function an_product_can_have_seo_information()
    {
        Seo::factory()->create(['seoable_id'=>$this->product->id, 'seoable_type'=>Product::class]);
        $this->assertInstanceOf(Seo::class, $this->product->seo);
    }

    /** @test */
    public function an_product_can_have_multiple_categories()
    {
        $categories = Category::factory(4)->create();
        $this->product->categories()->sync($categories->pluck('id')->toArray());

        $this->assertInstanceOf(Collection::class, $this->product->categories);
        $this->assertInstanceOf(Category::class, $this->product->categories->first());
    }

    /** @test */
    public function an_product_can_have_multiple_sections()
    {
        $sections = Section::factory(4)->create();
        $this->product->sections()->sync($sections->pluck('id')->toArray());

        $this->assertInstanceOf(Collection::class, $this->product->sections);
        $this->assertInstanceOf(Section::class, $this->product->sections->first());
    }

    /** @test */
    public function an_product_have_a_path()
    {
        $this->assertNotNull($this->product->path());
        $this->assertIsString($this->product->path());
    }

    /** @test */
    public function an_product_have_a_preview_path()
    {
        $this->assertNotNull($this->product->previewPath());
        $this->assertIsString($this->product->previewPath());
    }

    /** @test */
    public function an_product_have_a_facebook_share_link()
    {
        $this->assertNotNull($this->product->facebookShareLink());
        $this->assertIsString($this->product->facebookShareLink());
    }

    /** @test */
    public function an_product_have_a_linkedin_share_link()
    {
        $this->assertNotNull($this->product->linkedinShareLink());
        $this->assertIsString($this->product->linkedinShareLink());
    }

    /** @test */
    public function an_product_have_a_twitter_share_link()
    {
        $this->assertNotNull($this->product->twitterShareLink());
        $this->assertIsString($this->product->twitterShareLink());
    }

    /** @test */
    public function an_product_have_a_email_share_link()
    {
        $this->assertNotNull($this->product->emailShareLink());
        $this->assertIsString($this->product->emailShareLink());
    }

    /** @test */
    public function a_product_can_have_multiple_optionals()
    {
        $optionals = Product::factory(3)->create();

        $this->product->optionals()->sync($optionals->pluck('id')->toArray());
        $this->assertCount(3,$this->product->optionals);
        $this->assertInstanceOf(Product::class, $this->product->optionals->first());
    }

    /** @test */
    public function is_possible_to_check_if_a_product_can_be_bought()
    {
        $this->assertIsBool($this->product->canBeBought());
    }

    /** @test */
    public function a_product_with_variant_cant_be_bought()
    {
        $product = Product::factory()->create([
            'has_variants'=>true,
            'active'=>true,
            'stock'=>5
        ])->fresh();

        $this->assertTrue($product->has_variants);
        $this->assertFalse($product->canBeBought());
    }

    /** @test */
    public function a_product_without_stock_cant_be_bought()
    {
        $product = Product::factory()->create([
            'has_variants'=>false,
            'active'=>true,
            'stock'=>0
        ])->fresh();

        $this->assertTrue($product->stock < 1);
        $this->assertFalse($product->canBeBought());
    }

    /** @test */
    public function a_product_has_a_shippment_weight()
    {
        $this->assertArrayHasKey('shippment_weight', $this->product->toArray());
        $this->assertIsInt($this->product->shippment_weight);

    }
    /** @test */
    public function a_product_has_a_shippment_width()
    {
        $this->assertArrayHasKey('shippment_width', $this->product->toArray());
        $this->assertIsInt($this->product->shippment_width);
    }

    /** @test */
    public function a_product_has_shippment_height()
    {
        $this->assertArrayHasKey('shippment_height', $this->product->toArray());
        $this->assertIsInt($this->product->shippment_height);
    }
    /** @test */
    public function a_product_has_shippment_length()
    {
        $this->assertArrayHasKey('shippment_length', $this->product->toArray());
        $this->assertIsInt($this->product->shippment_length);
    }

    /** @test */
    public function a_inactive_product_cant_be_bought()
    {
        $product = Product::factory()->create([
            'has_variants'=>false,
            'active'=>false,
            'stock'=>5
        ])->fresh();

        $this->assertFalse($product->active);
        $this->assertFalse($product->canBeBought());
    }

    /** @test */
    public function a_user_can_retrieve_the_buyable_price()
    {
        $product = Product::factory()->create([
            'promoted_price'=>10,
            'price'=>30
        ]);

        $this->assertEquals(10, $product->getBuyablePrice());

        $product = Product::factory()->create([
            'promoted_price'=>0,
            'price'=>30
        ]);

        $this->assertEquals(30, $product->getBuyablePrice());
    }

    /** @test */
    public function the_product_model_has_settings()
    {
        $this->assertNotNull(Setting::where('name','product_settings')->first());
    }

    /** @test */
    public function inicialy_the_cms_consider_the_products_have_already_the_price_tax_included()
    {
        $this->assertTrue(Product::first()->priceHasTaxesIncluded());
    }

    /** @test */
    public function can_get_the_volume_for_a_product()
    {
        $product = Product::factory()->create(['shippment_weight' => 20, 'shippment_length' => 5, 'shippment_width' => 5, 'shippment_height' => 5]);
        $this->assertEquals(5*5*5, $product->getShippmentVolume());
    }

    /** @test */
    public function an_product_return_model_meta_tags()
    {
        Seo::factory()->create(['seoable_id'=>$this->product->id, 'seoable_type'=>Product::class]);
        $this->assertNotEmpty($this->product->modelMetaTags());
        $this->assertIsString($this->product->modelMetaTags());
    }

}
