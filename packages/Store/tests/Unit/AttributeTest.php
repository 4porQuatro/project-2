<?php

namespace Packages\Store\tests\Unit;

use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeOption;
use Illuminate\Database\QueryException;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Collection;
use Tests\TestCase;

class AttributeTest extends TestCase
{
    use DatabaseMigrations;

    public $attribute;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->attribute = Attribute::factory()->create()->fresh();
    }

    /**  @test */
    public function has_a_admin_title()
    {
        $this->assertArrayHasKey('admin_title', $this->attribute->toArray());
        $this->assertIsString($this->attribute->admin_title);
    }

    /**  @test */
    public function admin_title_is_unique()
    {
        $this->expectException(QueryException::class);
        Attribute::factory()->create(['admin_title'=>$this->attribute->admin_title])->fresh();
    }

    /**  @test */
    public function has_a_unique_per_product()
    {
        $this->assertArrayHasKey('unique_per_product', $this->attribute->toArray());
        $this->assertIsBool($this->attribute->unique_per_product);
    }

    /** @test */
    public function has_a_priority()
    {
        $this->assertArrayHasKey('priority', $this->attribute->toArray());
        $this->assertIsInt($this->attribute->priority);
    }

    /**  @test */
    public function has_a_title()
    {
        $this->assertArrayHasKey('title', $this->attribute->toArray());
        $this->assertIsString($this->attribute->title);
    }

    /**  @test */
    public function attribute_has_swatch_type_options()
    {
        $swatch_type_options = Attribute::SWATCH_TYPE_OPTIONS;

        $this->assertNotNull($swatch_type_options);
        $this->assertIsArray($swatch_type_options);
    }

    /**  @test */
    public function can_have_a_swatch_type()
    {
        $swatch_type = Attribute::SWATCH_TYPE_OPTIONS;
        $swatch_type = $swatch_type[0];

        $another_attribute = Attribute::factory()->create(['swatch_type' => $swatch_type]);

        $this->assertArrayHasKey('swatch_type', $another_attribute->toArray());
        $this->assertNotNull($another_attribute->swatch_type);
    }

    /**  @test */
    public function can_have_empty_attribute_options()
    {
        $this->assertDatabaseMissing('attribute_options', ['attribute_id'=>$this->attribute->id]);
        $this->assertEmpty($this->attribute->attributeOptions);
        $this->assertInstanceOf(Collection::class, $this->attribute->attributeOptions);
    }

    /**  @test */
    public function can_have_multiple_attribute_options()
    {
        AttributeOption::factory(5)->create(['attribute_id'=>$this->attribute->id]);
        $this->attribute = $this->attribute->fresh();

        $this->assertDatabaseHas('attribute_options', ['attribute_id'=>$this->attribute->id]);
        $this->assertNotEmpty($this->attribute->attributeOptions);
        $this->assertInstanceOf(Collection::class, $this->attribute->attributeOptions);
        $this->assertInstanceOf(AttributeOption::class, $this->attribute->attributeOptions->first());
    }
}
