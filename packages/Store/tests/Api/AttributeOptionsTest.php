<?php

namespace Packages\Store\tests\Api;

use App\Models\ExternalReference;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeOption;
use Tests\Feature\cms\CmsTestCase;
use Tests\TestCase;

class AttributeOptionsTest extends CmsTestCase
{

    use DatabaseMigrations;

    public $attribute;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Sanctum::actingAs(
            $this->user_with_permissions,
            ['store_items']
        );
        $this->attribute = Attribute::factory()->create();
        AttributeOption::factory(3)->create(['attribute_id'=>$this->attribute->id]);
    }

    /** @test */
    public function a_authorized_user_can_send_new_attribute_options()
    {
        $attribute = $this->getAttributeOptionsArray();
        $response = $this->post(route('api.attribute_option.store'), $attribute);

        $response->assertStatus(200);
        $this->assertDatabaseHas('attribute_option_translations', ['title'=>$attribute['pt']['title']]);

        $this->assertCount(4, $this->attribute->attributeOptions);
    }

    /** @dataProvider requiredFields */
    public function test_end_point_attribute_options($content)
    {
        $attribute = $this->getAttributeOptionsArray();
        unset($attribute[$content]);

        $response = $this->post(route('api.attribute_option.store'), $attribute);

        $response->assertStatus(302);
        $response->assertSessionHasErrors($content);

    }

    public function requiredFields()
    {
        return [
                ['title'],
                ['attribute_identifier']
        ];
    }

    /** @test */
    public function the_attribute_must_exists()
    {
        $attribute = $this->getAttributeOptionsArray();
        $attribute['attribute_identifier'] = 10;
        $response = $this->post(route('api.attribute_option.store'), $attribute);

        $response->assertStatus(302);
        $response->assertSessionHasErrors('attribute_identifier');
    }

    /** @test */
    public function a_authorized_user_can_update_a_attribute_option()
    {
        $attribute = $this->getAttributeOptionsArray();
        $attribute_option = AttributeOption::factory()->create(['attribute_id' => $this->attribute->id]);

        $response = $this->put(route('api.attribute_option.update', ['attribute_option'=>$attribute_option->id]), $attribute);

        $response->assertStatus(200);
        $this->assertDatabaseMissing('attribute_option_translations', ['title'=>$attribute_option->title]);
        $this->assertDatabaseHas('attribute_option_translations',['title'=>$attribute['pt']['title']]);

    }

    /** @test */
    public function on_update_the_title_must_be_present()
    {
        $attribute = $this->getAttributeOptionsArray();
        $attribute_option = AttributeOption::factory()->create(['attribute_id' => $this->attribute->id]);
        unset($attribute['title']);

        $response = $this->put(route('api.attribute_option.update', ['attribute_option' => $attribute_option->id]), $attribute);

        $response->assertStatus(302);
        $response->assertSessionHasErrors('title');
    }

    /** @test */
    public function a_authorized_user_can_delete_a_attribute_value()
    {
        $attribute_option = AttributeOption::factory()->create(['attribute_id' => $this->attribute->id]);

        $response = $this->delete(route('api.attribute_option.delete', ['attribute_option'=>$attribute_option->id]));

        $response->assertStatus(200);
        $this->assertDatabaseMissing('attribute_option_translations', ['title'=>$attribute_option->title]);
    }


    protected function getPermissions()
    {
        return ['attribute_store', 'attribute_update', 'attribute_destroy'];
    }

    /**
     * @return mixed
     */
    private function getAttributeOptionsArray()
    {
        $attribute['attribute_identifier'] = $this->attribute->id;
        $attribute['title'] = 'titilo do reco';
        $attribute['pt']['title'] = 'ola mundo';

        return $attribute;
    }
}
