<?php

namespace Packages\Store\tests\Api;

use App\Models\Category;
use App\Models\ExternalReference;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeFamily;
use Packages\Store\app\Models\AttributeOption;
use Packages\Store\app\Models\Product;
use Tests\Feature\cms\CmsTestCase;
use Tests\TestCase;

class ProductWithVariantsTest extends CmsTestCase
{

    use DatabaseMigrations;
    public $attributes;
    public $family;
    public $categories;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Sanctum::actingAs(
            $this->user_with_permissions,
            ['store_items']
        );
        $this->setAttributes();
        $this->setFamily();
        $this->categories = Category::factory(3)->create(['categorable'=>Product::class]);
    }

    /** @test */
    public function a_authorized_user_can_create_a_parent_product()
    {
        $this->withoutExceptionHandling();
        $data = $this->createData();
        $data['is_parent'] = true;
        $data['attributes'] = [];
        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('products', ['has_variants'=>1]);
    }

    /** @test */
    public function a_user_can_create_a_new_variant()
    {
        $parent_product = Product::factory()->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id]);
        $data = $this->createData();
        $data['parent_identifier'] = $parent_product->id;

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('products', ['has_variants'=>0, 'sku'=>$data['sku'], 'parent_id'=>$parent_product->id]);

    }

    /** @test */
    public function when_a_user_creates_a_variant_it_must_have_always_the_same_family_of_attributes()
    {
        $parent_product = Product::factory()->create(['has_variants' => true, 'attribute_family_id'=>AttributeFamily::factory()->create()->id]);
        $data = $this->createData();
        $data['parent_identifier'] = $parent_product->id;

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['attribute_family_identifier']);
    }

    /** @test */
    public function when_a_user_creates_a_variant_without_specifing_the_attribute_family_its_used_the_attribute_family_parent()
    {
        $data = $this->createData();
        $parent_product = Product::factory()->create(['has_variants' => true, 'attribute_family_id'=>$data['attribute_family_identifier']]);
        unset($data['attribute_family_identifier']);
        $data['parent_identifier'] = $parent_product->id;

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);
        $product_created = Product::where('parent_id', $parent_product->id)->first();
    }


    /** @test */
    public function a_user_cant_add_categories_to_the_childrens()
    {
        $parent_product = Product::factory()->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id]);
        $data = $this->createData();
        $data['parent_identifier'] = $parent_product->id;

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);
        $product_created = Product::where('parent_id', $parent_product->id)->first();
        $this->assertDatabaseMissing('categorables', ['categorable_id'=>$product_created->id]);

    }

    /** @test */
    public function a_user_cant_add_attributes_directly_on_parent()
    {
        $data = $this->createData();
        $data['is_parent'] = true;
        //$data['attributes'] = [];
        $response = $this->json('POST',route('api.products.store'), $data);


        $response->assertStatus(200);
        $product_created = Product::orderBy('id', 'desc')->first();
        $attributes = $this->attributes->map(function ($item) {
            return $item->attributeOptions->first()->id;
        })->toArray();
        foreach($attributes as $att)
        {
            $this->assertDatabaseMissing('attribute_option_product', ['product_id'=>$product_created->id, 'attribute_option_id'=>$att]);
        }
    }

    /** @test */
    public function when_user_add_a_children_the_attributes_of_the_parent_are_updated()
    {
        $parent_product = Product::factory()->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id]);
        $data = $this->createData();

        $data['parent_identifier'] = $parent_product->id;

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);
        $product_created = Product::where('parent_id', $parent_product->id)->first();
        $attributes = $this->attributes->map(function ($item) {
            return $item->attributeOptions->first()->id;
        })->toArray();
        foreach($attributes as $att)
        {
            $this->assertDatabaseHas('attribute_option_product', ['product_id'=>$product_created->id, 'attribute_option_id'=>$att]);
        }
        foreach($attributes as $att)
        {
            $this->assertDatabaseHas('attribute_option_product', ['product_id'=>$parent_product->id, 'attribute_option_id'=>$att]);
        }

    }

    /** @test */
    public function if_the_attribute_family_its_not_present_the_system_automacly_find_it()
    {
        $data = $this->createData();
        $attribute_family_finded = $data['attribute_family_identifier'];
        unset($data['attribute_family_identifier']);
        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(200);
        $response->assertJsonMissingValidationErrors(['attribute_family_identifier']);
        $this->assertDatabaseHas('products', ['sku'=> $data['sku']]);
        $product = Product::orderBy('id', 'DESC')->first();
        $this->assertEquals($attribute_family_finded, $product->attribute_family_id);
        $this->assertEquals($data['sku'], $product->sku);
        $this->assertDatabaseMissing('attribute_families', ['id'=>2]);

    }

    /** @test */
    public function when_a_user_creates_a_product_without_specifing_the_attribute_family_id_if_none_matches_the_attribute_the_system_generates_one()
    {
        $data = $this->createData();
        unset($data['attribute_family_identifier']);
        $data['attributes'] =  [$data['attributes'][0]];
        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(200);
        $response->assertJsonMissingValidationErrors(['attribute_family_identifier']);
        $this->assertDatabaseHas('products', ['sku'=> $data['sku']]);
        $this->assertDatabaseHas('attribute_families', ['id'=>2]);

        $response = $this->json('POST', route('api.products.store'), $data);
        $this->assertDatabaseMissing('attribute_families', ['id'=>3]);


    }


    protected function getPermissions()
    {
        return ['product_store', 'product_update', 'product_destroy'];
    }

    private function setAttributes(): void
    {

        $this->attributes = Attribute::factory(3)->create(['unique_per_product'=>true]);
        $this->attributes->each(function ($att) {
            for($i=0; $i<4; $i++)
                AttributeOption::factory()->create(['attribute_id' => $att->id]);
        });
    }

    private function setFamily(): void
    {
        $this->family = AttributeFamily::factory()->create();
        $this->family->attributes()->sync($this->attributes->pluck('id')->toArray());
    }

    /**
     * @return array
     */
    private function createData(): array
    {
        $data = Product::factory()->raw();
        unset($data['priority']);
        $data['pt'] = ['title' => 'produto 1', 'small_body' => 'Pequena descrição do produto 1', 'body' => 'Descrição do produto 1', 'active' => true,];
        $data['active'] = true;
        $data['categories'] = $this->categories->pluck('id')->toArray();
        $data['optionals'] = [];
        $data['attribute_family_identifier'] = $this->family->id;
        $data['attributes'] = $this->attributes->map(function ($item) {
            return (string) $item->attributeOptions->first()->id;
        })->toArray();

        return $data;
    }
}
