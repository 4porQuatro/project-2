<?php

namespace Packages\Store\tests\Api;

use App\Models\ExternalReference;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Packages\Store\app\Models\Attribute;
use Tests\Feature\cms\CmsTestCase;
use Tests\TestCase;

class AttributesTest extends CmsTestCase
{

    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Sanctum::actingAs(
            $this->user_with_permissions,
            ['store_items']
        );
        Attribute::factory(4)->create();
    }

    /** @test */
    public function a_authorized_user_can_send_new_attributes()
    {
        $attribute['unique_per_product'] = true;
        $attribute['title'] = 'ola mundo';
        $attribute['pt']['title'] = 'ola mundo';

        $response = $this->post(route('api.attribute.store'), $attribute);

        $response->assertStatus(200);
        $this->assertDatabaseHas('attribute_translations', ['title'=>$attribute['title']]);

        $this->assertCount(5, Attribute::all());
    }

    /** @test */
    public function on_creation_an_attribute_must_have_a_title()
    {
        $attribute['unique_per_product'] = true;
        $response = $this->post(route('api.attribute.store'), $attribute);

        $response->assertStatus(302);
        $response->assertSessionHasErrors(['title']);
    }


    /** @test */
    public function a_unauthorized_user_cant_create_a_new_attribute()
    {
        Sanctum::actingAs(
            $this->user_without_permissions,
            ['store_items']
        );
        $attribute['title'] = 'ola mundo';
        //$attribute['identifier'] = 'reco';
        $attribute['pt']['title'] = 'ola mundo';
        $response = $this->post(route('api.attribute.store'), $attribute);

        $response->assertStatus(403);
    }

    /** @test */
    public function a_authorized_user_can_update_a_existing_attribute()
    {
        $this->withoutExceptionHandling();
        $existing_attribute = Attribute::factory()->create();
        $data['title'] = 'ola mundo';
        $data[app()->getLocale()]['title'] = 'ola mundo2';

        $response = $this->put(route('api.attribute.update', ['attribute'=>$existing_attribute->id]), $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('attribute_translations', ['title'=>$data[app()->getLocale()]['title']]);
        $this->assertDatabaseMissing('attribute_translations', ['title'=>$existing_attribute->title]);
    }

    /** @test */
    public function a_authorized_user_can_delete_a_attribute()
    {
        $this->withoutExceptionHandling();
        $existing_attribute = Attribute::factory()->create();

        $response = $this->delete(route('api.attribute.delete',  ['attribute'=>$existing_attribute->id]));
        $response->assertStatus(200);
        $this->assertDatabaseMissing('category_translations',['title'=>$existing_attribute->title]);
        $this->assertDatabaseMissing('attributes', ['id'=>$existing_attribute->id]);
    }

    protected function getPermissions()
    {
        return ['attribute_store', 'attribute_update', 'attribute_destroy'];
    }
}
