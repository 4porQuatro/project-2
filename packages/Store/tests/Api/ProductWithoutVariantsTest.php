<?php

namespace Packages\Store\tests\Api;

use App\Models\Category;
use App\Models\Component;
use App\Models\ExternalReference;
use App\Models\Field;
use GuzzleHttp\Client;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeFamily;
use Packages\Store\app\Models\AttributeOption;
use Packages\Store\app\Models\Product;
use Tests\Feature\cms\CmsTestCase;
use Tests\TestCase;

class ProductWithoutVariantsTest extends CmsTestCase
{

    use DatabaseMigrations;
    public $attributes;
    public $family;
    public $categories;
    public $existing_products;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Sanctum::actingAs(
            $this->user_with_permissions,
            ['store_items']
        );
        $this->setAttributes();
        $this->setFamily();
        $this->categories = Category::factory(3)->create(['categorable'=>Product::class]);
    }

    /** @test */
    public function a_authorized_user_can_create_products()
    {
        $data = $this->createData();

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('product_translations', ['title' => $data['pt']['title']]);
    }

    /** @test */
    public function on_creation_the_categories_are_sync_with_the_product()
    {
        $data = $this->createData();

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);

        $product_created = Product::orderBy('id', 'desc')->first();

        $this->assertCount(count($this->categories), $product_created->categories);
        foreach($this->categories as $cat)
        {
            $this->assertTrue(in_array($cat->id, $product_created->categories->pluck('id')->toArray()));
        }
    }

    /** @test */
    public function on_creation_the_attributes_are_saved()
    {
        $data = $this->createData();
        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);

        $product_created = Product::orderBy('id', 'desc')->first();

        $this->assertCount(count($data['attributes']), $product_created->attributeOptions);

        foreach($data['attributes'] as $attribute)
        {
            $this->assertTrue(in_array($attribute, $product_created->attributeOptions->pluck('id')->toArray()));
        }

    }

    /** @test */
    public function on_creation_the_seo_its_automacly_created()
    {
        $data = $this->createData();

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);

        $product_created = Product::orderBy('id', 'desc')->first();

        $this->assertNotEmpty($product_created->seo);

        $this->assertEquals($data['title'], $product_created->seo->title);
    }

    /** @test */
    public function on_creation_its_possible_to_add_optionals()
    {
        $data = $this->createData();
        $existing_products = collect();

        for($i=0; $i<2; $i++)
            $existing_products = $existing_products->push(Product::factory()->create());

        $data['optionals'] = $existing_products->pluck('id')->toArray();

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(200);

        $product_created = Product::orderBy('id', 'desc')->first();

        $this->assertCount(2, $product_created->optionals);

        foreach($existing_products as $prod)
        {
            $this->assertTrue(boolval($product_created->optionals->where('id',$prod->id)->count()));
        }
    }

    /** @test */
    public function if_the_optionals_dont_exits_it_returns_a_error()
    {
        $data = $this->createData();

        $data['optionals'] = [342];

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['optionals']);

    }

    /** @test */
    public function a_product_must_have_a_title()
    {
        $data = $this->createData();
        unset($data['title']);

        $response = $this->json('POST',route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['title']);
    }


    /** @test */
    public function a_product_must_have_a_category_associated()
    {
        $data = $this->createData();
        unset($data['categories']);

        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['categories']);
    }

    /** @test */
    public function the_categories_must_be_on_format_array()
    {
        $data = $this->createData();
        $data['categories'] = 3;
        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['categories']);
    }

    /** @test */
    public function the_categories_must_exits()
    {
        $data = $this->createData();
        $data['categories'] = array_merge($data['categories'], ['i_dont_exits']);
        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['categories']);
    }

    /** @test */
    public function if_the_category_has_parent_id_the_parents_must_be_associated_too()
    {
        $data = $this->createData();
        $parent_category = Category::factory()->create(['categorable'=>Product::class]);
        $children_category = Category::factory()->create(['parent_id'=> $parent_category->id, 'categorable'=>Product::class]);
        $data['categories'] = array_merge($data['categories'], [$children_category->id]);
        $response = $this->json('POST', route('api.products.store'), $data);
        $response->assertStatus(200);

        array_push($data['categories'], $parent_category->id);
        $last_product_created = Product::orderBy('id', 'desc')->first();
        foreach($data['categories'] as $cat)
        {
            $this->assertDatabaseHas('categorables', ['category_id'=>$cat, 'categorable_type'=>Product::class, 'categorable_id'=>$last_product_created->id]);
        }


    }

    /** @test */
    public function if_the_attribute_family_its_not_present_the_system_automacly_find_it()
    {
        $data = $this->createData();
        $attribute_family_finded = $data['attribute_family_identifier'];
        unset($data['attribute_family_identifier']);
        $data['is_parent'] = false;
        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(200);
        $response->assertJsonMissingValidationErrors(['attribute_family_identifier']);
        $this->assertDatabaseHas('products', ['sku'=> $data['sku']]);
        $product = Product::orderBy('id', 'DESC')->first();
        $this->assertEquals($attribute_family_finded, $product->attribute_family_id);
        $this->assertEquals($data['sku'], $product->sku);
        $this->assertDatabaseMissing('attribute_families', ['id'=>2]);

    }

    /** @test */
    public function when_a_user_creates_a_product_without_specifing_the_attribute_family_id_if_none_matches_the_attribute_the_system_generates_one()
    {
        $data = $this->createData();
        unset($data['attribute_family_identifier']);
        $data['attributes'] =  [$data['attributes'][0]];
        $data['is_parent'] = false;
        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(200);
        $response->assertJsonMissingValidationErrors(['attribute_family_identifier']);
        $this->assertDatabaseHas('products', ['sku'=> $data['sku']]);
        $this->assertDatabaseHas('attribute_families', ['id'=>2]);

    }


    /** @test */
    public function all_attributes_options_for_a_given_family_must_present()
    {
        $data = $this->createData();
        unset($data['attributes'][0]);
        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['attributes']);
    }

    /** @test */
    public function all_attributes_options_selected_must_exits()
    {
        $data = $this->createData();
        array_push($data['attributes'], 'test');

        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['attributes']);

    }


    /** @test */
    public function its_possible_to_create_a_new_product_without_any_attribute_option()
    {
        $data = $this->createData();
        $data['attributes'] = [];
        $data['attribute_family_identifier'] = AttributeFamily::factory()->create()->id;

        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(200);
    }

    /** @test */
    public function the_optionals_for_the_products_must_be_an_array()
    {
        $data = $this->createData();
        $data['optionals'] = 1;

        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['optionals']);


    }

    /** @test */
    public function the_optionals_are_required()
    {
        $data = $this->createData();
        unset($data['optionals']);

        $response = $this->json('POST', route('api.products.store'), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['optionals']);
    }

    /** @test */
    public function a_existing_product_can_be_updated()
    {
        $this->withoutExceptionHandling();
        $product = Product::factory()->create();

        $response = $this->json('PUT', route('api.products.update', ['product'=>$product->id]), []);

        $response->assertStatus(200);
    }

    /** @test */
    public function on_update_the_identifier_must_exists()
    {
        $response = $this->json('PUT', route('api.products.update', ['product' => 'ai_reco_que_tolo']), []);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['product']);
    }


    /**
     * @dataProvider allProductTranslationsFields
     */
    public function test_on_update_the_product_translations_can_be_updated_with_single_fields($content)
    {
        $data = $this->createData();
        unset($data['attribute_family_identifier']);
        $data['pt'] = [
            'title'=>'la',
            'small_body'=>'O reco ta maluko',
            'body'=>'O reco está cada vez mais maluco',
            'active'=>true,
        ];
        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);


        $response = $this->json('PUT', route('api.products.update', ['product'=>$product->id]), $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('product_translations', [$content => is_bool($data['pt'][$content]) ? (int) $data['pt'][$content] : $data['pt'][$content]]);
    }

    public function allProductTranslationsFields()
    {
        return [
            'title'=>['title'],
            'small_body'=>['small_body'],
            'body'=>['body'],
            'active'=>['active']];

    }

    /**
     * @dataProvider allProductFields
     */
    public function test_on_update_the_product_can_be_updated_with_single_fields($content)
    {
        $data = $this->createData();
        unset($data['attribute_family_identifier']);

        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);

        $response = $this->json('PUT', route('api.products.update', ['product'=>$product->id]), $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('products', [$content => $data[$content]]);
    }

    public function allProductFields()
    {
        return [
            'sku'=>['sku'],
            'ref'=>['ref'],
            'price'=>['price'],
            'promoted_price'=>['promoted_price'],
            'stock'=>['stock'],
            ];
    }

    /** @test */
    public function a_user_can_change_the_categories_for_a_existing_product()
    {
        $data['categories'] = $this->createData()['categories'];
        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);

        $response = $this->json('PUT', route('api.products.update', ['product'=>$product->id]), $data);
        $response->assertStatus(200);

        foreach($this->categories as $cat)
        {
            $this->assertDatabaseHas('categorables', ['category_id'=>$cat->id, 'categorable_id'=>$product->id]);
        }
    }

    /** @test */
    public function on_update_all_categories_must_exists()
    {
        $data['categories'] = $this->createData()['categories'];
        $data['categories'][] = 'reco_n_existe';

        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);

        $response = $this->json('PUT', route('api.products.update', ['product'=> $product->id]), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['categories']);

    }

    /** @test */
    public function on_update_the_category_field_must_be_an_array()
    {
        $data['categories'] = 'reco_n_existe';

        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);

        $response = $this->json('PUT', route('api.products.update', ['product'=> $product->id]), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['categories']);
    }

    /** @test */
    public function a_user_can_update_the_attributes()
    {
        $data['attributes'] = $this->createData()['attributes'];
        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);

        $response = $this->json('PUT', route('api.products.update', ['product'=> $product->id]), $data);
        $response->assertStatus(200);

        $attributes = $this->attributes->map(function($item){
            return $item->attributeOptions->first();
        });
        foreach($attributes as $att)
        {
            $this->assertDatabaseHas('attribute_option_product', ['attribute_option_id'=>$att->id, 'product_id'=>$product->id]);
        }
    }

    /** @test */
    public function on_update_all_attributes_must_exists()
    {
        $data['attributes'] = $this->createData()['attributes'];
        $data['attributes'][] = 'detail';
        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);

        $response = $this->json('PUT', route('api.products.update', ['product'=> $product->id]), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['attributes']);

    }
    /** @test */
    public function on_update_all_attributes_by_the_family_must_be_filled()
    {
        $data['attributes'] = $this->createData()['attributes'];
        unset($data['attributes'][0]);
        $product = Product::factory()->create(['attribute_family_id'=>$this->family->id]);

        $response = $this->json('PUT', route('api.products.update', ['product'=> $product->id]), $data);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['attributes']);

    }

    /** @test */
    public function a_product_without_variants_cant_have_variants()
    {
        //$this->withoutExceptionHandling();
        $inicial_product = $this->createData();
        $product = Product::create($inicial_product);
        $product->has_variants = false;
        $product->save();

        $new_data = $this->createData();
        $new_data['parent_identifier'] = $product->id;

        $response = $this->json('POST', route('api.products.store'), $new_data);


        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['parent_id']);
    }




    protected function getPermissions()
    {
        return ['product_store', 'product_update', 'product_destroy'];
    }

    private function setAttributes(): void
    {

        $this->attributes = Attribute::factory(3)->create(['unique_per_product'=>true]);
        $this->attributes->each(function ($att) {
            for($i=0; $i<4; $i++)
                AttributeOption::factory()->create(['attribute_id' => $att->id]);
        });
    }

    private function setFamily(): void
    {
        $this->family = AttributeFamily::factory()->create();
        $this->family->attributes()->sync($this->attributes->pluck('id')->toArray());
    }

    /**
     * @return array
     */
    private function createData(): array
    {
        $data = Product::factory()->raw();
        unset($data['priority']);
        $data['pt'] = ['title' => 'produto 1', 'small_body' => 'Pequena descrição do produto 1', 'body' => 'Descrição do produto 1', 'active' => true,];
        $data['active'] = true;
        $data['categories'] = $this->categories->pluck('id')->toArray();
        $data['optionals'] = [];
        $data['attribute_family_identifier'] = $this->family->id;
        $data['attributes'] = $this->attributes->map(function ($item) {
            return $item->attributeOptions->first()->id;
        })->toArray();
        return $data;
    }
}
