<?php


namespace Packages\Store\tests\Api;


use App\Models\Category;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Laravel\Sanctum\Sanctum;
use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeFamily;
use Packages\Store\app\Models\AttributeOption;
use Packages\Store\app\Models\Product;
use Tests\Feature\cms\CmsTestCase;

class ProductTest extends CmsTestCase {

    use DatabaseMigrations;
    public $attributes;
    public $family;
    public $categories;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Sanctum::actingAs(
            $this->user_with_permissions,
            ['store_items']
        );
        $this->setAttributes();
        $this->setFamily();
        $this->categories = Category::factory(3)->create(['categorable'=>Product::class]);
    }


    /** @test */
    public function a_user_can_get_the_list_of_all_products()
    {
        $products = Product::factory(49)->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id]);

        $response = $this->json('GET', route('api.products.get'));

        $response->assertStatus(200);

        $data = $response->baseResponse->original;
        $products->each(function($item) use ($data){
            $this->assertTrue((boolean) $data->where('id',$item->id)->count());
        });

    }

    /** @test */
    public function a_user_can_get_the_list_of_product_filtered_by_category()
    {
        $categories = Category::factory()->create(['categorable'=>Product::class]);
        $products = Product::factory(49)->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id]);
        $products_categories = Product::factory(5)->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id])->each(function($item) use($categories){
            $item->categories()->sync($categories->pluck('id')->toArray());
        });;
        $response = $this->json('GET', route('api.products.get', ['categories'=>$categories->first()->id]));
        $this->assertEquals($products_categories->count(), $response->baseResponse->original->count());

        $response = $this->json('GET', route('api.products.get', ['categories'=>$categories->pluck('id')->toArray()]));

        $this->assertEquals($products_categories->count(), $response->baseResponse->original->count());

    }

    /** @test */
    public function a_user_can_get_the_products_filtered_by_sku()
    {
        $categories = Category::factory()->create(['categorable'=>Product::class]);
        $products = Product::factory(49)->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id]);
        $products_categories = Product::factory(5)->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id])->each(function($item) use($categories){
            $item->categories()->sync($categories->pluck('id')->toArray());
        });;
        $sku = 'boby_reco';
        $get_product = Product::factory()->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id, 'sku'=>'boby_reco']);

        $response = $this->json('GET', route('api.products.get', ['sku'=>$get_product->sku]));

        $this->assertEquals($get_product->sku, $response->baseResponse->original->first()->sku);
    }

    /** @test */
    public function a_user_can_get_the_products_filtered_by_id()
    {
        $categories = Category::factory()->create(['categorable'=>Product::class]);
        $products = Product::factory(49)->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id]);
        $products_categories = Product::factory(5)->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id])->each(function($item) use($categories){
            $item->categories()->sync($categories->pluck('id')->toArray());
        });;
        $get_product = Product::factory()->create(['has_variants'=>true, 'attribute_family_id'=>$this->family->id, 'sku'=>'boby_reco']);

        $response = $this->json('GET', route('api.products.get', ['sku'=>$get_product->sku]));

        $this->assertEquals($get_product->id, $response->baseResponse->original->first()->id);
    }




    private function setAttributes(): void
    {

        $this->attributes = Attribute::factory(3)->create(['unique_per_product'=>true]);
        $this->attributes->each(function ($att) {
            for($i=0; $i<4; $i++)
                AttributeOption::factory()->create(['attribute_id' => $att->id]);
        });
    }

    private function setFamily(): void
    {
        $this->family = AttributeFamily::factory()->create();
        $this->family->attributes()->sync($this->attributes->pluck('id')->toArray());
    }


    protected function getPermissions()
    {
        return ['product_index','product_store', 'product_update', 'product_destroy'];
    }
}
