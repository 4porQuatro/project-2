<?php

namespace Packages\Store\tests\Feature;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Packages\Store\app\Classes\Front\Shoppingcart\Cart;
use Packages\Store\app\Models\Product;
use Tests\TestCase;

class CartTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

    }

    /** @test */
    public function is_possible_to_get_the_cart_content()
    {
        $response = $this->get(route('store.cart.index'));

        $response->assertStatus(200);
        $response->assertJson([
            'content'=>[], 'content_count'=>0, 'total'=>"0.00"]
        );
    }

    /** @test */
    public function when_a_product_its_added_for_the_first_time_on_the_cart_a_cart_model_its_created()
    {
        $product = Product::factory()->create([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ]);
        $response = $this->addProductToTheCart($product->id, 1);
        $response->assertStatus(200);
        $this->assertNotEmpty(\Packages\Store\app\Models\Cart::first());
        $this->assertDatabaseHas('carts', ['session_id'=>session()->getId()]);
    }

    /** @test */
    public function is_possible_add_a_product_to_the_cart()
    {
        $product = Product::factory([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ])->create();

        $response = $this->addProductToTheCart($product->id, 1);

        $excpected_response = [
            'content_count'=>1,
            'total'=>"10.00"
        ];

        $response->assertJsonFragment($excpected_response);
    }

    /** @test */
    public function is_possible_to_get_the_cart_content_after_products_are_added()
    {
        $product = Product::factory([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ])->create();

        $session = $this->app->make('session');

        $response = $this->addProductToTheCart($product->id, 3);

        $response = $this->get(route('store.cart.index'));

        $response->assertStatus(200);

        $excpected_response = [
            'content_count'=>3,
            'total'=>"30.00"
        ];

        $response->assertJsonFragment($excpected_response);
    }

    /** @test */
    public function is_possible_to_remove_a_product_from_the_cart()
    {
        $product = Product::factory([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ])->create();

        $response = $this->addProductToTheCart($product->id, 1);

        $response = $this->removeProductFromTheCart($product->id);

        $excpected_response = [
            'content'=>[],
            'content_count'=>0,
            'total'=>"0.00"
        ];

        $response->assertJsonFragment($excpected_response);
    }

    /** @test */
    public function is_possible_to_update_a_product_from_the_cart()
    {
        $product = Product::factory([
            'stock'=>5,
            'price'=>10,
            'promoted_price'=>null
        ])->create();

        $response = $this->addProductToTheCart($product->id, 1);

        $response = $this->updateProductFromTheCart($product->id, 3);

        $excpected_response = [
            'content_count'=>3,
            'total'=>"30.00"
        ];

        $response->assertJsonFragment($excpected_response);
    }

    private function addProductToTheCart($product_id, int $quantity)
    {
        $data = [
            'product_id'=>$product_id,
            'quantity'=>$quantity
        ];

        return $this->post(route('store.cart.store'), $data);
    }

    private function removeProductFromTheCart($product_id)
    {
        return $this->delete(route('store.cart.remove', ['product_id'=>$product_id]));
    }

    private function updateProductFromTheCart($product_id, int $quantity)
    {
        $data = [
            'product_id'=>$product_id,
            'quantity'=>$quantity
        ];

        return $this->patch(route('store.cart.patch'), $data);
    }
}
