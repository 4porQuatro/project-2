<?php


namespace Packages\Store\tests\Feature;


use App\Models\Category;
use App\Models\Setting;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Session\SessionManager;
use Packages\Country\App\Classes\Front\SessionVariable;
use Packages\Country\App\Models\Currency;
use Packages\Store\app\Models\Attribute;
use Packages\Store\app\Models\AttributeOption;
use Packages\Store\app\Models\Product;
use Tests\TestCase;

class ProductTest extends TestCase {

    use DatabaseMigrations;

    public $products;
    public $categories;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->categories = Category::factory(4)->create(['categorable'=>Product::class]);
        $products = collect([]);
        $this->categories->each(function($category) use (&$products){
            $products_prev = Product::factory(3)->create();
            $category->categorables()->sync($products_prev->pluck('id')->toArray());
            $products = $products->merge($products_prev);
        });
        $this->products = $products;
    }

    /** @test */
    public function when_no_paramenters_its_setted_all_products_are_returned()
    {
        $response = $this->get(route('store.products.get'));

        $response->assertStatus(200);
        $this->assertEquals($this->products->count(), count($response->json()['data']));
    }

    /** @test */
    public function if_on_paramenters_the_attribute_items_per_page_its_set_the_correct_number_of_products_its_returned()
    {
        $response = $this->get(route('store.products.get', ['items_per_page'=>2, 'page'=>1]));

        $response->assertStatus(200);
        $this->assertEquals(2, count($response->json()['data']));
    }

    /** @test */
    public function a_user_can_filter_by_the_title()
    {
        $term = 'reco_the_best';
        $product = Product::factory(1)->create(['title'=>$term]);
        $response = $this->get(route('store.products.get', ['search_term'=>$term]));
        $response->assertStatus(200);
        $this->assertEquals(1, count($response->json()['data']));
        $this->assertEquals($term, $response->json()['data'][0]['title']);
    }

    /** @test */
    public function a_user_can_filter_all_promoted_products()
    {
        $products = Product::factory(4)->create(['promoted' => 1]);

        $response = $this->get(route('store.products.get', ['promoted'=>1]));
        $response->assertStatus(200);
        $this->assertEquals(4, count($response->json()['data']));
    }

    /** @test */
    public function a_user_can_filter_all_highlighted_products()
    {
        $products = Product::factory(4)->create(['highlighted' => 1]);

        $response = $this->get(route('store.products.get', ['highlighted'=>1]));
        $response->assertStatus(200);
        $this->assertEquals(4, count($response->json()['data']));
    }


    /** @test */
    public function a_user_can_order_the_results_by_title()
    {
        $response = $this->get(route('store.products.get', ['order_field' => 'title', 'order_direction' => 'DESC']));
        $response->assertStatus(200);
        $products = $this->products->sortByDesc('title');
        foreach($response->json()['data'] as $item)
        {
            $this->assertEquals($products->shift()->id, $item['id']);
        }
    }

    /** @test */
    public function a_user_can_order_the_results_by_price()
    {
        $selected_category = Category::factory()->create(['categorable' => Product::class]);
        $expected_products = Product::factory(4)->create()->each(function($prod) use ($selected_category) {
            $prod->categories()->attach([$selected_category->id]);
        });
        $prices_ordered = $expected_products->sortByDesc('price');
        $response = $this->get(route('store.products.get', ['order_field' => 'price', 'order_direction' => 'DESC', 'categories'=>[$selected_category->id]]));
        foreach($response->json()['data'] as $item)
        {
            $this->assertEquals($prices_ordered->shift()->id, $item['id']);
        }
    }

    /** @test */
    public function a_visitor_can_get_a_list_of_products_filtered_by_category()
    {
        $this->withoutExceptionHandling();
        $selected_category = Category::factory()->create(['categorable' => Product::class]);
        $expected_products = Product::factory(4)->create()->each(function($prod) use ($selected_category) {
            $prod->categories()->attach([$selected_category->id]);
        });
        $not_expected_products = Product::factory(3)->create()->each(function($prod){
            $prod->categories()->attach([Category::factory()->create(['categorable'=>Product::class])->id]);
        });

        $response = $this->get(route('store.products.get', ['categories'=>[$selected_category->id]]));
        $response->assertStatus(200);

        foreach($response->baseResponse->original['data'] as $prod)
        {
            $this->assertTrue($expected_products->contains($prod));
        }

        foreach($response->baseResponse->original['data'] as $prod)
        {
            $this->assertFalse($not_expected_products->contains($prod));
        }
    }

    /** @test */
    public function a_visitor_can_filter_products_by_attribute_values()
    {
        $this->withoutExceptionHandling();

        $expected_products = Product::factory(3)->create();
        $not_expected_products = Product::factory(4)->create();
        $attribute = Attribute::factory()->create();
        $attribute_option_filtered = AttributeOption::factory()->create(['attribute_id'=>$attribute->id]);
        $attribute_option_not_filtered = AttributeOption::factory()->create(['attribute_id'=>$attribute->id]);

        $expected_products->each(function($item) use ($attribute_option_filtered){
           $item->attributeOptions()->attach([$attribute_option_filtered->id]);
        });

        $response = $this->get(route('store.products.get', ['att['.$attribute->id.']' => [$attribute_option_filtered->id, 23, 43]]));
        $response->assertStatus(200);
        foreach($response->baseResponse->original['data'] as $prod)
        {
            $this->assertTrue($expected_products->contains($prod));
        }
        foreach($response->baseResponse->original['data'] as $prod)
        {
            $this->assertFalse($not_expected_products->contains($prod));
        }
    }

    /** @test */
    public function a_visitor_can_filter_products_by_interval_of_prices()
    {
        $this->withoutExceptionHandling();

        $expected_products = Product::factory(3)->create(['price'=>rand(1200, 1500), 'promoted_price'=>rand(1000, 1100)]);
        $not_expected_products = Product::factory(3)->create(['price'=>rand(1800, 2000), 'promoted_price'=>rand(1600, 1800)]);

        $response = $this->get(route('store.products.get', ['biggest_price'=>1500, 'smallest_price'=>1200]));
        foreach($response->baseResponse->original['data'] as $prod)
        {
            $this->assertTrue($expected_products->contains($prod));
        }
        foreach($response->baseResponse->original['data'] as $prod)
        {
            $this->assertFalse($not_expected_products->contains($prod));
        }

    }

    /** @test */
    public function the_buyable_price_its_corretly_setted_when_taxes_are_not_changed()
    {

        $product = Product::factory()->create(['price'=>10, 'promoted_price'=>0]);

        $this->assertEquals(10, $product->final_price);

    }


    /** @test */
    public function the_buyable_price_its_corretly_setted_when_taxes_for_the_user_change()
    {
        (new SessionVariable())->setUserTaxes(10);
        $product = Product::factory()->create(['price'=>10, 'promoted_price'=>0]);

        $this->assertEquals(round((10/1.23)*1.1,2), $product->final_price);
    }

    /** @test */
    public function the_buyable_price_its_corretly_setted_when_rates_for_the_user_change()
    {
        $currency = Currency::findOrFail(10);
        $currency->rate = 10;
        $currency->save();
        (new SessionVariable())->setPriceRate($currency);
        $product = Product::factory()->create(['price'=>10, 'promoted_price'=>0]);
        $this->assertEquals(round((10)*10,2), $product->final_price);
    }

    /** @test */
    public function the_buyable_price_its_correcly_setted_when_prices_has_no_taxes_included_on_the_price()
    {
        $default_tax = Setting::where('name','default_tax')->first();
        $product_settings = Setting::where('name', 'product_settings')->first();
        $product_settings->data = ["taxes_included"=>false, "consider_the_default_tax"=>true];
        $product_settings->save();

        $product = Product::factory()->create(['price'=>10, 'promoted_price'=>0]);

        $this->assertEquals(round(10*1.23,2), $product->final_price);
    }

    /** @test */
    public function the_buyable_price_its_sensible_to_the_rate()
    {
        $currency = Currency::first();
        $currency->rate = 23;
        $currency->save();

        SessionVariable::setPriceRate($currency);
        $product = Product::factory()->create(['price'=>10, 'promoted_price'=>0]);
        $this->assertEquals(round(10*23,2), $product->final_price);
    }



}
